Cycle Monitor Example Apama Application, v1.0 (July 2015)
=========================================================

1.Introduction
--------------
Cycle Monitor is an example application built using the Software AG Apama product. 
It is intended to exemplify a typical Apama application, in a very simplified 
manner. It is licensed under the GNU General Public Licence and as such is 
distributed in the hope that it will be useful, but without any warranty, without 
even the implied warranty of merchantability or fitness for a particular purpose.

The application domain is travel logistics, in particular cycle hire schemes, 
e.g. Santander Cycles London https://tfl.gov.uk/modes/cycling/santander-cycles. It 
presents an analytics framework to alert on the status of cycle docking stations, 
such as when the number of available cycles in a station falls below or rises above
a configured threshold, or when the rate of change of available cycles exceeds a 
configured threshold. It makes use of the CityBikes API available to the public 
at http://api.citybik.es. 
 

2.Dependencies
--------------
The following dependencies are required to build and run the example application;

Apama: 
The application was built using Software AG Apama, version 5.3. The application
should run on earlier versions of the platform, although please note that PySys
is only shipped with Apama versions 5.1 and later. For more details on Apama see
https://www.softwareag.com/corporate/products/az/apama/default.asp.

PySys: 
PySys is used to demonstrate testing of the application, and is included in the 
Apama distribution post Apama 5.1. Should you have an earlier version of Apama, 
PySys and it's dependencies are detailed on the SourceForge website. For more 
information see http://sourceforge.net/projects/pysys/files/pysys/0.9.2.

Jython:
JyThon 2.7.0 is used to script usage of the Apama Engine Client libraries, in 
particular the scenario service to log changes in dataview instances. This is a 
common approach used where Java libraries are wrapped and scripted within testing. 
Jython should be installed on the local machine, and its location referenced in the 
.pysysproject file. For more details see http://www.jython.org/downloads.html. 

Sqlite:
Sqlite 3.8.10 is used in the testing of the application to create local database 
tables that can be populated within the confines of each test. Sqlite can also be
used as the main database instance to use, should you not have other RDBMS systems
available. For more details see https://sqlite.org/download.html.

MySQL Community Server:
MySQL 5.6 is used as the RDBMS to store configuration data for the application, 
although this is an optional dependency as any RDBMS can be used via the Apama 
ADBC adapter. For more information see http://dev.mysql.com/downloads.


3. Project Contents
-------------------
A brief schematic of relevant portions of the project contents is given below. 
Please note this is not an exhaustive list. 

    cycle-monitor   
         ├── .pysysproject            PySys project configuration
         ├──  build.xml               Top level build for running the application
         ├──  build.properties        Parameterisation of the application
         ├──  config/                 Adapter configuration and initialisation
         ├──  java/                   Adapter and UI source and build
         │     ├── build.xml            Ant build file
         │     ├── lib                  Dependent libraries
         │     └── src                  Java source
         ├──  monitors/               Apama EPL for the application
         ├──  python/                 Python utilities and base test
         ├──  store/                  Sqlite DB if not using a RDBMS
         └──  test/                   Testcases, data and utilities
       

4.Building the Application
--------------------------
To build the adapter for polling the CityBikes API, in an Apama command prompt, 
navigate to the java directory in the project root and run the below command;

  $ ant jar 

For building (and running) the UI, a JRE7 should be used to avoid inter-operability 
issues between JavaFX and the GoogleMaps API. For more detail on setting the project 
JRE in Eclipse, see http://help.eclipse.org. 

  
5.Running the Application
--------------------------
Prior to running the application, you should determine whether you want to run 
with configuration data store in an external RDBMS, e.g. MySQL, or whether you 
want to use the sqlite DB supplied. If the former, the schema and content should 
be created in the RDBMS - see the test/utils/scripts directory which contain 
some example SQL. The build.properties file in the project root directory is 
currently configured for MySQL, though also contains the required properties to 
run against the supplied sqlite DB. You should edit these properties for the 
RDMBS of choice. 

To run up the application, in the project root directory run the below command;

  $ ant start 

For a full list of available commands, run the usage task using the below command;

  $ ant usage
  
To run the UI, in Eclipse select the Main.java class in the java/src/com/jtech/ui
folder, right click, and select "Run As -> Java Application". Should errors be 
reported in the Eclipse console, perform a "Project -> Clean" from the main menu 
and repeat. In a later release the UI will be put into a separate project and 
Maven'ised for better build and launch. 

6.Testing the application
-------------------------

Testing of the application is performed using PySys. It should be noted that PySys
is a system test framework, not a unit test framework, and thus is used to script the 
execution of the system end-to-end. To do this all end-points are simulated within 
each test, such that we have full control of all data into the application, and full 
visibility of all data out of the application. The end points simulated are;

a. configuration from the RDBMS
b. streaming data from the CityBikes API
c. alerts sent to the UI through dataview instances

To simulate these, when running the system end-to-end in the tests, each test runs the 
ADBC adapter configured for a local DB created and confined within the test. A local 
HTTP server is started serving JSON created and controlled by each test, to limit the 
input data to that required. Addition and removal of dataview entries are monitored 
through a scenario_printer module, which uses Jython to wrap the Apama Engine Client 
libraries. Simplicity of the application facilitates easy simulation, though this is 
not atypical of the approach used in more complex applications, e.g. for algorithmic 
trading. 
