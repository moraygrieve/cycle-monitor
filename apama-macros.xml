<project name="ApamaMacros">
	<!-- #### Load Ant Contrib tasks #### -->
	<property environment="env" />
	<property file="environment.properties"/>

	<!-- #### Set properties that the user should not override -->
	<property name="apama-macros-version" value="5.3.0.0.247085" />
	<property name="apama.lib.version" value="5.3"/>
	<property name="apama.home" value="${env.APAMA_HOME}"/>
	<property name="apama.work" value="${env.APAMA_WORK}"/>
	<property name="apama.bin" value="${apama.home}/bin" />
	<property name="apama.lib" value="${apama.home}/lib" />
	<property name="apama.jre" value="${apama.home}/third_party/jre" />
	<property name="apama.ant-contrib" value="${apama.home}/third_party/jakarta-ant-1.7.1/lib/ant-contrib-1.0b3.jar" />

	<available file="${apama.ant-contrib}" property="apama.ant-contrib.exists"/>
	<fail unless="apama.ant-contrib.exists" message="Cannot find ant-contrib in ${apama.ant-contrib} (is APAMA_HOME variable set correctly?)"/>

	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<pathelement location="${apama.ant-contrib}" />
		</classpath>
	</taskdef>
	<!-- #### End of Load Ant Contrib tasks #### -->

	<!-- #### Greetings #### -->
	<echo message="......................................................................................." />
	<echo message="Apama Ant Macros v${apama-macros-version}" />
	<echo message="" />
	<echo message="Copyright (c) 2013-2015 Software AG, Darmstadt, Germany and/or Software AG USA Inc., Reston, VA, USA, and/or its subsidiaries and/or its affiliates and/or their licensors. Use, reproduction, transfer, publication or disclosure is prohibited except as specifically provided for in your License Agreement with Software AG." />
	<echo message="......................................................................................." />

	<echo message="Using ${ant.version}" />
	<osfamily property="osfamily" />
	<exec executable="hostname" outputproperty="host.name" />
	<echo message="Running as ${user.name} on ${host.name} (platform ${osfamily})" />
	<!-- #### End of Greetings #### -->

	<!--
	    INTRODUCTION
	    Apama-macros.xml is a collection of Ant macros that implement
	    common tasks like starting and stopping the correlator. The user
	    should import apama-macros.xml into their own build.xml file and
	    call the macros from Ant targets.
	    
	    USAGE
	    Add the following import statement to your build.xml file:
	    <import file="${apama.home}/etc/apama-macros.xml"/>
	    
	    PROPERTIES
	    The macros use a number of Ant properties. In order to allow the
	    user maximum flexibility with the macros, the implementation tries to
	    load properties from a number of files in the following order:
	    ${property.file}, ${user.name}-${host.name}.properties,
	    ${osfamily}.properties, and finally default.properties. The first
	    instance of a property will be remain, i.e. if both ${property.file}
	    and default.properties both define FOO, the definition in
	    ${property.file} will be used.
	    
	    The following properties are used by the macros:
	    
	    apama.home:
	    The home directory of the Apama installation. This property can
	    only be overridden either by defining it in build.xml or in
	    environment.properties. Defaults to ${env.APAMA_HOME}.
	    
	    apama.work:
	    The Apama working directory for the current user. This property
	    can only be overridden either by defining it in build.xml or in
	    environment.properties. Defaults to ${env.APAMA_WORK}.

	    apama.project:
	    The working directory for the current project. This property can
	    only be overridden either by defining it in build.xml or in
	    environment.properties. Defaults to the current working
	    directory.
	    
	    apama.bin:
	    The directory containing the Apama binaries. This property can
	    only be overridden either by defining it in build.xml or in
	    environment.properties. Defaults to ${apama.home}/bin.
	    
	    apama.lib:
	    The directory containing the Apama libraries. This property can
	    only be overridden either by defining it in build.xml or in
	    environment.properties. Defaults to ${apama.home}/lib.
	    
	    apama.jre:
	    The directory containing the JRE under the Apama
	    installation. This property can only be overridden either by
	    defining it in build.xml or in environment.properties. Defaults
	    ${apama.home}/third_party/jre.
	    
	    correlator.host:
	    The host where the correlator is running. Notice: the macros
	    cannot start correlator processes on remote hosts. Defaults to
	    localhost.
	    
	    correlator.port:
	    The port number of the correlator. Defaults to 15903.
	    
	    correlator.debug:
	    If true, application event logging is turned on when a new
	    correlator is launched. Defaults to false.
	    
	    correlator.license:
	    The location of the correlator license file. Defaults to
	    ${apama.work}/license/license.txt.
	    
	    iaf.host:
	    The host where the iaf processes are running. Notice: the macros
	    cannot start iaf processes on remote hosts. Defaults to
	    localhost.
	    
	    iaf.port:
	    The port number of the iaf process. Defaults to 16903.

	    dashboard.host:
	    The host where the dashboard server is running. Defaults to
	    localhost.
	    
	    dashboard.port:
	    The port number of the dashboard server. Defaults to 28888.
	    
	    event_modeler.config:
	    The location of the event_modeler_config.xml file. Defaults to
	    ${apama.home}/etc/event_modeler_config.xml.

	    properties.dir:
	    The directory containing the property files that the Apama
	    macros should use. Defaults to the current working directory.
	    
	    scenarios.dir:
	    The directory containing scenario definitions. Defaults to
	    ${apama.project}/scenarios.
	    
	    catalogs.dir
	    The directory that is used to store generated blocks. Defaults to 
	    ${apama.project}/catalogs.
	    
	    log.dir:
	    The directory for log file for this project. Defaults to
	    ${apama.project}/logs.
	    
	    build.dir:
	    The directory for storing build artifacts that are generated
	    during the Ant run. Defaults to ${apama.project}/build.
	    
	    bin.dir:
	    The directory containing project specific binaries and
	    scripts. Defaults to ${apama.project}/bin.
	    
	    config.dir:
	    The directory containing project specific configuration
	    files. Defaults to ${apama.project}/config.
	    
	    
	    The following properties are set by the macros:
	    
	    host.name:
	    The output from the hostname command line tool.
	    
	    osfamily:
	    The Operating System family, e.g. windows or unix.
	    
	    bin.ext:
	    Set to ".exe" on Windows and to "" on other platforms.
		
		Default Correlator.port, Default Correlator.hostname, apama_home:
		These are used in patching adapter .properties files when starting iaf.
		See generate-iaf-config macro.
	    
	    If the defaults are not appropriate, the poroperty values can be
	    set either in build.xml before importing apama-macros.xml or in
	    any of the properties files that get loaded.
	-->

	<!-- #### Load property files #### -->
	<!-- Helper macro for loading property files -->
	<macrodef name="loadprop">
		<attribute name="file" />
		<sequential>
			<if>
				<available file="@{file}" />
				<then>
					<echo message="Loading @{file}" />
					<property file="@{file}" />
				</then>
				<else>
					<echo message="Skipping @{file}" />
				</else>
			</if>
		</sequential>
	</macrodef>

	<property name="properties.dir" value="${user.dir}" />

	<if>
		<isset property="property.file" />
		<then>
			<echo message="Loading properties from config file: ${property.file}" />
			<loadprop file="${properties.dir}${file.separator}${property.file}" />
		</then>
	</if>

	<loadprop file="${properties.dir}${file.separator}${user.name}-${host.name}.properties" />
	<loadprop file="${properties.dir}${file.separator}${host.name}.properties" />
	<loadprop file="${properties.dir}${file.separator}${osfamily}.properties" />
	<loadprop file="${properties.dir}${file.separator}default.properties" />
	<!-- #### End of Load property files #### -->

	<!-- #### Default values for user overridable properties #### -->
	<!-- Directories -->
	<property name="apama.project" value="${user.dir}"/>
	<property name="log.dir" value="${apama.project}/logs"/>
	<property name="build.dir" value="${apama.project}/build" />
	<property name="bin.dir" value="${apama.project}/bin" />
	<property name="config.dir" value="${apama.project}/config" />
	<property name="event_modeler.xml" value="event_modeler_config.xml" />
	<property name="event_modeler.config" value="${apama.home}/etc/${event_modeler.xml}" />
	<property name="scenarios.dir" value="${apama.project}/scenarios" />
	<property name="catalogs.dir" value="${apama.project}/catalogs" />

	<!-- Other properties -->
	<property name="correlator.host" value="localhost"/>
	<property name="correlator.port" value="15903"/>
	<property name="correlator.debug" value="false" />
	<property name="correlator.license" value="${apama.work}/license/license.txt" />
	<property name="iaf.host" value="localhost"/>
	<property name="iaf.port" value="16903"/>
	<property name="dashboard.host" value="localhost"/>
	<property name="dashboard.port" value="28888"/>
	<property name="apama_dashboard_classpath" value=""/>
	<!-- default seconds to wait for component up before timing out during 
		during correlator/iaf start
	-->
	<property name="startcomponent.waitperiod" value="10"/>

	<!-- Properties for adapter config file patching -->
	<property name="Default Correlator.port" value="${correlator.port}" />
	<property name="Default Correlator.hostname" value="${correlator.host}" />
	<property name="apama_home" value="${apama.home}" />

	<!-- Set OS specific settings -->
	<if>
		<equals arg1="${osfamily}" arg2="windows" />
		<then>
			<property name="bin.ext" value=".exe" />
		</then>
		<else>
			<property name="bin.ext" value="" />
		</else>
	</if>
	<property name="apama.display-server" value="${apama.bin}/display_server${bin.ext}" />

	<!-- Timestamp template -->
	<tstamp>
		<format property="LOG_TSTAMP" pattern="yyyyMMdd_HHmmss" />
	</tstamp>
	<!-- #### End of Property default values #### -->

	<!-- Log directory must always exist, otherwise logs can't be created. -->
	<mkdir dir="${log.dir}" />

	<!-- %%%% MACROS %%%% -->

	<!-- #### Correlator macros #### -->
	<!-- START-CORRELATOR: Start a new correlator instance on localhost
	     on the given port. This macro first verifies that there isn't
	     an existing correlator instance already running on the given
	     port before trying to start a new instance. It also verifies
	     that the correlator has started and is reachable. Use this
	     macro rather than run-correlator to start new instances.
	     
	     Use "%ID%" rather than "${ID}" in the input log file name
	     (inputLog) attribute to indicate where the correlator should
	     place the log sequence number. The "%ID%" string will be
	     replaced with "${ID}" before the correlator is executed (this
	     is because of a limitation of Ant and the format of the "${ID}"
	     string). Note: %ID% will be replaced globally through all the
	     correlator command line parameters. -->
	<macrodef name="start-correlator">
		<!-- Main Correlator options -->
		<attribute name="port" default="${correlator.port}" />
		<attribute name="name" default="correlator_@{port}" />

		<attribute name="log" default="${log.dir}${file.separator}@{name}_${LOG_TSTAMP}.log" />
		<attribute name="logLevel" default="INFO" />
		<attribute name="logTruncate" default="false" />

		<attribute name="inputLogEnabled" default="true"/>
		<attribute name="inputLog" default="${log.dir}${file.separator}@{name}_input_%ID%_${LOG_TSTAMP}.log" />
		<attribute name="UMconfig" default="" description="Specifies the name or path to a properties file that defines the UM configuration settings."/>

		<attribute name="license" default="${correlator.license}" />

		<attribute name="java" default="false" description="Java application support"/>
		<attribute name="distMemStoreConfig" default="" />
		<attribute name="javaOpt" default="" />
		<attribute name="classpath" default="${env.CLASSPATH}" />

		<attribute name="Xconfig" default="" />

		<!-- Advanced Correlator options -->
		<attribute name="maxoutstandingack" default="" />
		<attribute name="maxoutstandingkb" default="" />
		<attribute name="qdisconnect" default="false" />
		<attribute name="logQueueSizePeriod" default="" />
		<attribute name="XsetRandomSeed" default="" />
		<attribute name="XignoreEnqueue" default="false" />
		<attribute name="noOptimize" default="false" />
		<attribute name="Xclock" default="false" />

		<!-- Process startup options-->
		<attribute name="console" default="false" />
		<attribute name="dir" default="" />

		<attribute name="extraArgs" default="" />

		<!-- Options specific to start-correlator -->
		<attribute name="checkStarted" default="true" />
		<attribute name="waitperiod" default="${startcomponent.waitperiod}" />
		<attribute name="failonerror" default="true" />
		<attribute name="enableApplicationEventLogging" default="${correlator.debug}" />

		<sequential>
			<wait-for-correlator host="localhost" port="@{port}" waitperiod="2" resultproperty="correlator.@{port}.inittest" failonerror="false" dir="@{dir}" />
			<if>
				<equals arg1="${correlator.@{port}.inittest}" arg2="0" />
				<then>
					<echo message="Correlator already running on port @{port}" />
				</then>
				<else>
					<run-correlator 
							port="@{port}"
							log="@{log}"
							logLevel="@{logLevel}"
							logTruncate="@{logTruncate}"
							name="@{name}"
							license="@{license}"
							maxoutstandingack="@{maxoutstandingack}"
							maxoutstandingkb="@{maxoutstandingkb}"
							qdisconnect="@{qdisconnect}"
							logQueueSizePeriod="@{logQueueSizePeriod}"
							distMemStoreConfig="@{distMemStoreConfig}"
							java="@{java}"
							javaOpt="@{javaOpt}"
							classpath="@{classpath}"
							inputLogEnabled="@{inputLogEnabled}"
							inputLog="@{inputLog}"
							XsetRandomSeed="@{XsetRandomSeed}"
							XignoreEnqueue="@{XignoreEnqueue}"
							noOptimize="@{noOptimize}"
							Xclock="@{Xclock}"
							Xconfig="@{Xconfig}"
						    UMconfig="@{UMconfig}"
							extraArgs="@{extraArgs}"
							console="@{console}"
							dir="@{dir}" />

					<if>
						<istrue value="@{checkStarted}" />
						<then>
							<wait-for-correlator host="localhost" port="@{port}" waitperiod="@{waitperiod}" resultproperty="correlator.@{port}.runtest" failonerror="@{failonerror}" dir="@{dir}"/>
							<if>
								<not>
									<equals arg1="${correlator.@{port}.runtest}" arg2="0" />
								</not>
								<then>
									<fail message="Did not start correlator!" />
								</then>
								<else>
									<if>
										<istrue value="@{enableApplicationEventLogging}" />
										<then>
											<echo>enabling application event logging for correlator</echo>
											<application-event-logging host="localhost" port="@{port}" dir="@{dir}" />
										</then>
									</if>
								</else>
							</if>
						</then>
					</if>
				</else>
			</if>
		</sequential>
	</macrodef>

	<!-- RUN-CORRELATOR: Start a new correlator instance on
	     localhost. This macro simply starts the process. The
	     start-correlator macro is more user friendly by first checking
	     whether a correlator is already running on the given port, then
	     calling this macro to start a new correlator, and finally
	     verifying that the correlator has started.
	     
	     Use "%ID%" rather than "${ID}" in the input log file name
	     (inputLog) attribute to indicate where the correlator should
	     place the log sequence number. The "%ID%" string will be
	     replaced with "${ID}" before the correlator is executed (this
	     is because of a limitation of Ant and the format of the "${ID}"
	     string). Note: %ID% will be replaced globally through all the
	     correlator command line parameters. -->
	<macrodef name="run-correlator">
		<!-- Main Correlator options -->
		<attribute name="port" default="${correlator.port}" />
		<attribute name="name" default="correlator_@{port}" />

		<attribute name="log" default="${log.dir}${file.separator}@{name}_${LOG_TSTAMP}.log" />
		<attribute name="logLevel" default="INFO" />
		<attribute name="logTruncate" default="false" />

		<attribute name="inputLogEnabled" default="true"/>
		<attribute name="inputLog" default="${log.dir}${file.separator}@{name}_input_%ID%_${LOG_TSTAMP}.log" />
		<attribute name="UMconfig" default="" description="Specifies the name or path to a properties file that defines the UM configuration settings."/>
		
		<attribute name="license" default="${correlator.license}" />

		<attribute name="java" default="false" description="Java application support"/>
		<attribute name="distMemStoreConfig" default=""/>
		<attribute name="javaOpt" default="" />
		<attribute name="classpath" default="${env.CLASSPATH}" />

		<attribute name="Xconfig" default="" />

		<!-- Advanced Correlator options -->
		<attribute name="maxoutstandingack" default="" />
		<attribute name="maxoutstandingkb" default="" />
		<attribute name="qdisconnect" default="false" />
		<attribute name="logQueueSizePeriod" default="" />
		<attribute name="XsetRandomSeed" default="" />
		<attribute name="XignoreEnqueue" default="false" />
		<attribute name="noOptimize" default="false" />
		<attribute name="Xclock" default="false" />

		<!-- Process startup options-->
		<attribute name="console" default="false" />
		<attribute name="dir" default="" />

		<attribute name="extraArgs" default="" />

		<sequential>
			<echo message="Starting correlator port: @{port}" />
			<echo message="Using log: @{log}" />

			<var name="rcArgs" />
			<append-arg-if-set var="rcArgs" optionName="--name" arg="@{name}" />
			<append-arg-if-set var="rcArgs" optionName="--port" arg="@{port}" />
			<append-arg-if-set var="rcArgs" optionName="--logfile" arg="@{log}" />
			<append-arg-if-set var="rcArgs" optionName="--loglevel" arg="@{logLevel}" />
			<append-arg-if-true var="rcArgs" optionName="--truncate" arg="@{logTruncate}" />

			<if>
				<available file="@{license}" />
				<then>
					<echo message="Using license: @{license}" />
					<append-arg var="rcArgs" arg="--license '@{license}'" quote=""/>
				</then>
				<else>
					<echo message="NO LICENSE - WILL ONLY RUN for 30MINS" />
				</else>
			</if>

			<append-arg-if-set var="rcArgs" optionName="--maxoutstandingack" arg="@{maxoutstandingack}" />
			<append-arg-if-set var="rcArgs" optionName="--maxoutstandingkb" arg="@{maxoutstandingkb}" />
			<append-arg-if-true var="rcArgs" optionName="--qdisconnect" arg="@{qdisconnect}" />
			<append-arg-if-set var="rcArgs" optionName="--logQueueSizePeriod" arg="@{logQueueSizePeriod}" />

			<if>
				<istrue value="@{java}" />
				<then>
					<append-arg var="rcArgs" arg="--java" quote="" />
				</then>
			</if>
			<!-- javaopt can be set if there's a JVM due to java, or distmemstore or jms -->
			<condition property="apamaCorrelatorJavaOptContainsQuot">
				<or>
					<contains string="@{javaOpt}" substring="&quot;"/>
					<contains string="@{javaOpt}" substring="&apos;"/>
				</or>
			</condition>
			<fail if="apamaCorrelatorJavaOptContainsQuot" message="Correlator javaOpt parameter cannot contain quotes: to specify Java options that contain spaces please use extraArgs -J &quot;myarg&quot; instead of javaOpt"/>

			<for list="@{javaOpt}" param="thisJavaOpt" delimiter=" " trim="true">
				<sequential>
					<append-arg-if-set var="rcArgs" optionName="-J" arg="@{thisJavaOpt}" />
				</sequential>
			</for>

			<append-arg-if-set var="rcArgs" optionName="--distMemStoreConfig" arg="@{distMemStoreConfig}" />

			<if>
				<istrue value="@{inputLogEnabled}" />
				<then>
					<echo message="Using input log: @{inputlog}" />
					<append-arg var="rcArgs" arg="--inputLog '@{inputLog}'"  quote=""/>
				</then>
			</if>
			
			<append-arg-if-set var="rcArgs" optionName="-XsetRandomSeed" arg="@{XsetRandomSeed}" />
			<append-arg-if-true var="rcArgs" optionName="-XignoreEnqueue" arg="@{XignoreEnqueue}" />
			<append-arg-if-true var="rcArgs" optionName="--nooptimize" arg="@{noOptimize}" />
			<append-arg-if-true var="rcArgs" optionName="-Xclock" arg="@{Xclock}" />
			<append-arg-if-set var="rcArgs" optionName="-Xconfig" arg="@{Xconfig}" />
			<append-arg-if-set var="rcArgs" optionName="-UMconfig" arg="@{UMconfig}" />
			<append-extra-args var="rcArgs" extraArgs="@{extraArgs}" />

			<!-- replace %ID% in the inputLog file name with ${ID} -
			     because of Ant's limitation in escaping ${ID} type strings,
			     we use a dummy toke (%ID%) and replace that with ${ID}
			     here, where we're finished manipulating the command line
			     string -->
			<propertyregex property="rcArgs"
			               override="true"
			               input="${rcArgs}"
			               regexp="%ID%"
			               replace="$${ID}"
			               global="true"
			               />

			<echo message="Starting correlator with arguments: ${rcArgs}" />

			<if>
				<and>
					<istrue value="@{console}" />
					<equals arg1="${osfamily}" arg2="windows" />
				</and>
				<then>
					<var name="rcArgs" value="/c start 'Correlator p: @{port}' /min '${apama.bin}/correlator${bin.ext}' ${rcArgs}" />
					<exec executable="cmd" spawn="true" dir="@{dir}" >
						<env key="APAMA_HOME" value="${apama.home}" />
						<env key="APAMA_WORK" value="${apama.work}" />
						<env key="PATH" path="${apama.home}/bin:${apama.home}/adapters/bin:${apama.jre}/bin/server:${apama.jre}/bin:${bin.dir}:${env.PATH}" />
						<env key="CLASSPATH" path="@{classpath}"/>
						<arg line="${rcArgs}" />
					</exec>
				</then>

				<else>
					<exec executable="${apama.bin}/correlator${bin.ext}" spawn="true" dir="@{dir}" >
						<env key="APAMA_HOME" value="${apama.home}" />
						<env key="APAMA_WORK" value="${apama.work}" />
						<env key="PATH" path="${apama.home}/bin:${apama.home}/adapters/bin:${apama.jre}/bin/server:${apama.jre}/bin:${bin.dir}:${env.PATH}" />
						<env key="CLASSPATH" path="@{classpath}"/>
						<arg line="${rcArgs}" />
					</exec>
				</else>
			</if>
		</sequential>
	</macrodef>

	<!-- WAIT-FOR-CORRELATOR: Check that a correlator is running on the
	     given host and port. The macro will block waiting for a
	     correlator to start up. The blocking is either infinite or
	     limited by the optional waitperdio argument. The caller can
	     check the value of the resultproperty when the macro returns. 0
	     indicates that the correlator is up. A non-zero value indicates
	     that a correlator instance was not up on the given host and
	     port. -->
	<macrodef name="wait-for-correlator">
		<attribute name="host" default="${correlator.host}" />
		<attribute name="port" default="${correlator.port}" />
		<attribute name="waitperiod" default="-1" />
		<attribute name="resultproperty" default="" />
		<attribute name="failonerror" default="true" />
		<attribute name="dir" default="" />
		<sequential>
			<var name="wfcArgs" />
			<if>
				<equals arg1="@{waitperiod}" arg2="-1" />
				<then>
					<echo message="Waiting for correlator on port @{port}" />
					<append-arg var="wfcArgs" arg="--wait" />
				</then>
				<else>
					<echo message="Waiting @{waitperiod} secs for correlator on port @{port}" />
					<append-arg var="wfcArgs" arg="--waitFor" quote="" />
					<append-arg var="wfcArgs" arg="@{waitperiod}" quote="" />
				</else>
			</if>

			<engine-management host="@{host}" port="@{port}" 
					resultproperty="@{resultproperty}" failonerror="@{failonerror}" dir="@{dir}">
				<arg line="${wfcArgs}" />
			</engine-management>
		</sequential>
	</macrodef>

	<!-- KILL-CORRELATOR: Stop a correlator that is running on the given
	     host on the given port. -->
	<macrodef name="kill-correlator">
		<attribute name="host" default="${correlator.host}" />
		<attribute name="port" default="${correlator.port}" />
		<attribute name="message" default="apama-macros.xml:kill-correlator" />
		<attribute name="resultproperty" default="" />
		<attribute name="failonerror" default="true" />
		<attribute name="dir" default="" />
		<sequential>
			<echo message="Stopping correlator on @{host}:@{port}" />
			<engine-management host="@{host}" port="@{port}" 
					resultproperty="@{resultproperty}" failonerror="@{failonerror}" dir="@{dir}">
				<arg value="--shutdown" />
				<arg value="@{message}" />
			</engine-management>
		</sequential>
	</macrodef>

	<!-- ENGINE-INJECT: Inject monitorscript, correlator deployment packages 
	     or JMon jar files into the correlator. The file name can be specified 
	     either with the file argument or Ant's path reference, path, fileset, 
	     and filelist elements. The parallel argument controls whether multiple 
	     files are injected serially or in parallel with multiple
	     engine_inject invocations. -->
	<macrodef name="engine-inject">
		<attribute name="host" default="${correlator.host}" />
		<attribute name="port" default="${correlator.port}" />
		<attribute name="file" default="" />
		<attribute name="parallel" default="true" />
		<attribute name="verbose" default="false" />
		<attribute name="java" default="false" />
		<attribute name="cdp" default="false" />
		<attribute name="hashes" default="false" />
		<attribute name="utf8" default="false" />
		<attribute name="resultproperty" default="" />
		<attribute name="failonerror" default="true" />
		<element name="engine-files" optional="true" implicit="yes" description="Path references, such as paths, filesets, and filelists." />
		<attribute name="extraArgs" default="" />
		<attribute name="dir" default="" />
		<sequential>
			<var name="eiArgs" />
			<append-arg-if-set var="eiArgs" optionName="--hostname" arg="@{host}" />
			<append-arg-if-set var="eiArgs" optionName="--port" arg="@{port}" />
			<append-arg-if-true var="eiArgs" optionName="--java" arg="@{java}" />
			<append-arg-if-true var="eiArgs" optionName="--cdp" arg="@{cdp}" />
			<append-arg-if-true var="eiArgs" optionName="--hashes" arg="@{hashes}" />
			<append-arg-if-true var="eiArgs" optionName="--utf8" arg="@{utf8}" />
			<append-extra-args var="eiArgs" extraArgs="@{extraArgs}" />

			<if>
				<equals arg1="@{file}" arg2="" />
				<then>
					<echo message="Injecting files to [host=@{host} port=@{port}]" />
					<apply executable="${apama.bin}/engine_inject${bin.ext}" 
						ignoremissing="false" parallel="@{parallel}" verbose="@{verbose}"
						resultproperty="@{resultproperty}" failonerror="@{failonerror}" dir="@{dir}">
						<arg line="${eiArgs}" />
						<engine-files />
					</apply>
				</then>
				<else>
					<echo message="Injecting file @{file} to [host=@{host} port=@{port}]" />
					<exec executable="${apama.bin}/engine_inject${bin.ext}" resultproperty="@{resultproperty}" failonerror="@{failonerror}" dir="@{dir}">
						<arg line="${eiArgs}" />
						<arg file="@{file}" />
					</exec>
				</else>
			</if>
		</sequential>
	</macrodef>

	<!-- ENGINE-SEND: Send events from a file or files into the
	     correlator. The file name can be specified either with the file
	     argument or Ant's path reference, path, fileset, and filelist
	     elements. The parallel argument controls whether multiple files
	     are sent serially each file with its own engine_send
	     invocation, or in parallel with a single engine_send
	     invocation. -->
	<macrodef name="engine-send">
		<attribute name="host" default="${correlator.host}" />
		<attribute name="port" default="${correlator.port}" />
		<attribute name="file" default="" />
		<attribute name="literal" default="" />
		<attribute name="loopCount" default="0" />
		<attribute name="verbose" default="false" />
		<attribute name="utf8" default="false" />
		<attribute name="doNotBatch" default="false" />
		<attribute name="parallel" default="true" />
		<attribute name="resultproperty" default="" />
		<attribute name="failonerror" default="true" />
		<element name="engine-send-list" implicit="true" optional="true" description="Path references, such as paths, filesets, and filelists." />
		<attribute name="extraArgs" default="" />
		<attribute name="dir" default="" />
		<sequential>
			<var name="esArgs" />
			<append-arg-if-set var="esArgs" optionName="--hostname" arg="@{host}" />
			<append-arg-if-set var="esArgs" optionName="--port" arg="@{port}" />
			<append-arg-if-set var="esArgs" optionName="--loop" arg="@{loopCount}" />
			<append-arg-if-true var="esArgs" optionName="--verbose" arg="@{verbose}" />
			<append-arg-if-true var="esArgs" optionName="--utf8" arg="@{utf8}" />
			<append-arg-if-true var="esArgs" optionName="--doNotBatch" arg="@{doNotBatch}" />
			<append-extra-args var="esArgs" extraArgs="@{extraArgs}" />
			<if>
				<not>
					<equals arg1="@{literal}" arg2="" />
				</not>
				<then>
					<echo message="Sending literal event to @{host}:@{port}: @{literal}" />
					<exec executable="${apama.bin}/engine_send${bin.ext}"
							resultproperty="@{resultproperty}"
							failonerror="@{failonerror}" dir="@{dir}">
						<arg line="${esArgs}" />
						<redirector inputstring="@{literal}" />
					</exec>
				</then>
				<else>
					<if>
						<not>
							<equals arg1="@{file}" arg2="" />
						</not>
						<then>
							<echo message="Sending @{file} to [host=@{host} port=@{port}]" />
							<exec executable="${apama.bin}/engine_send${bin.ext}"
									resultproperty="@{resultproperty}"
									failonerror="@{failonerror}" dir="@{dir}">
								<arg line="${esArgs}" />
								<arg value="@{file}" />
							</exec>
						</then>
						<else>
							<echo message="Sending files to [host=@{host} port=@{port}]" />
							<apply executable="${apama.bin}/engine_send${bin.ext}"
									resultproperty="@{resultproperty}"
									failonerror="@{failonerror}" ignoremissing="false" 
									parallel="@{parallel}" dir="@{dir}">
								<arg line="${esArgs}" />
								<engine-send-list />
							</apply>
						</else>
					</if>
				</else>
			</if>
		</sequential>
	</macrodef>

	<!-- ENGINE-INJECT-FILELISTID: Inject or send the files referenced
	     by the given filelist ref id to the correlator. The macro will
	     identify the file type based on the filename suffix and inject
	     the file as monitorscript, JMon or CDP, or send the file as an event
	     file to the correlator. -->
	<!-- @deprecated instead use inject-project-init-list -->
	<macrodef name="engine-inject-filelistid">
		<attribute name="host" default="${correlator.host}" />
		<attribute name="port" default="${correlator.port}" />
		<attribute name="filelistid" />
		<attribute name="resultproperty" default="" />
		<attribute name="failonerror" default="true" />
		<attribute name="extraArgs" default="" />
		<attribute name="dir" default="" />
		<sequential>
			<for param="file">
				<path>
					<filelist refid="@{filelistid}" />
				</path>
				<sequential>
					<propertyregex property="tmp.ext" override="true" input="@{file}" regexp="([^.]*)$" select="\1" />
					<!-- if monitorscript, inject; if evt, send; if jar, inject; if cdp, inject; else log -->
					<switch value="${tmp.ext}">
						<case value="mon">
							<engine-inject host="@{host}" port="@{port}" file="@{file}" resultproperty="@{resultproperty}" failonerror="@{failonerror}" extraArgs="@{extraArgs}" dir="@{dir}" />
						</case>
						<case value="evt">
							<engine-send host="@{host}" port="@{port}" file="@{file}" resultproperty="@{resultproperty}" failonerror="@{failonerror}" extraArgs="@{extraArgs}" dir="@{dir}" />
						</case>
						<case value="jar">
							<engine-inject host="@{host}" port="@{port}" file="@{file}" java="true" resultproperty="@{resultproperty}" failonerror="@{failonerror}" extraArgs="@{extraArgs}" dir="@{dir}" />
						</case>
						<case value="cdp">
							<engine-inject host="@{host}" port="@{port}" file="@{file}" cdp="true" resultproperty="@{resultproperty}" failonerror="@{failonerror}" extraArgs="@{extraArgs}" dir="@{dir}" />
						</case>
						<default>
							<echo message="Unknown file extension: ${tmp.ext}, file @{file} - accepts mon, evt, jar and cdp" />
						</default>
					</switch>
				</sequential>
			</for>
		</sequential>
	</macrodef>

	<!-- INJECT-PROJECT-INIT-LIST: Inject or send the files referenced
		     by the given file to the correlator. The macro will
		     identify the file type based on the filename suffix and inject
		     the file as monitorscript, JMon ,SDF or CDP, or send the file as an event
		     file to the correlator. -->
	<macrodef name="inject-project-init-list">
		<attribute name="host" default="${correlator.host}" />
		<attribute name="port" default="${correlator.port}" />
		<attribute name="initlist" default="" />
		<attribute name="temp-location" description="Path to temporary location where sdf are converted to mon file" />
		<attribute name="failonerror" default="true" />
		<attribute name="extraArgs" default="" />
		<attribute name="project-dir" default="${apama.project}" />
		<attribute name="scenario-config" default="${event_modeler.config}" />
		<attribute name="scenario-debug" default="false" />

		<sequential>

			<var name="initlist.converted" unset="true"/>

			<pathconvert property="initlist.converted">
				<!--Pathconvert will try to add the root directory to the "path", so replace with empty string -->
				<map from="${user.dir}" to="" />
				<path location="@{initlist}"/>
				<filtermapper>
					<expandproperties />
					<tokenfilter>
						<replacestring from="${APAMA_HOME}" to="${apama.home}"/>
						<replacestring from="${APAMA_WORK}" to="${apama.work}"/>
					</tokenfilter>
				</filtermapper>
			</pathconvert>

			<for param="file" list="${initlist.converted}" delimiter="${line.separator}">
				<sequential>
					<echo>inject-project-init-list got: @{file}</echo>

					<var name="file.rel.name" unset="true"/>

					<pathconvert property="file.rel.name">
						<path location="@{file}"/>
						<globmapper from="@{project-dir}/*" to="*" handledirsep="true"/>
					</pathconvert>

					<propertyregex property="tmp.ext" override="true" input="@{file}" regexp="([^.]*)$" select="\1" />
					<!-- if monitorscript, inject; if evt, send; if jar, inject; if cdp, inject; else log -->
					<switch value="${tmp.ext}">
						<case value="mon">
							<engine-inject host="@{host}" port="@{port}" file="@{file}" resultproperty="@{resultproperty}" failonerror="@{failonerror}" extraArgs="@{extraArgs}" />
						</case>
						<case value="evt">
							<engine-send host="@{host}" port="@{port}" file="@{file}" resultproperty="@{resultproperty}" failonerror="@{failonerror}" extraArgs="@{extraArgs}" />
						</case>
						<case value="jar">
							<engine-inject host="@{host}" port="@{port}" file="@{file}" java="true" resultproperty="@{resultproperty}" failonerror="@{failonerror}" extraArgs="@{extraArgs}"  />
						</case>
						<case value="cdp">
							<engine-inject host="@{host}" port="@{port}" file="@{file}" cdp="true" resultproperty="@{resultproperty}" failonerror="@{failonerror}" extraArgs="@{extraArgs}" />
						</case>
						<case value="sdf">
							<inject-scenario host="@{host}" port="@{port}" destfile="@{temp-location}/${file.rel.name}.mon" srcfile="@{file}" config="@{scenario-config}" debug="@{scenario-debug}" failonerror="@{failonerror}" />
						</case>
						<case value="qry">
							<inject-query host="@{host}" port="@{port}" file="@{file}" resultproperty="@{resultproperty}" failonerror="@{failonerror}"/>
						</case>
						<default>
							<echo message="Unknown file extension: ${tmp.ext}, file @{file} - accepts mon, evt, jar, cdp and sdf" />
						</default>
					</switch>
				</sequential>
			</for>
		</sequential>
	</macrodef>

	<!-- GENERATE-PROJECT-INIT-LIST : Calculates the injection order for the project given. All the 
	     project variables will be resolved using properties provided.
	-->
	<macrodef name="generate-project-init-list">

		<attribute name="projectPath"/>
		<attribute name="configPath" default=""/>
		<attribute name="correlatorName" default=""/>
		<attribute name="outputFile" default=""/>
		<attribute name="properties" default=""/>
		<attribute name="failonerror" default="true" />
		<attribute name="dir" default="" />
		<attribute name="resultproperty" default="" />
		<attribute name="outputproperty" default="" description="Output property holding the list of generated initialization list" />

		<sequential>
			<var name="arguments" />
			<append-arg-if-set var="arguments" optionName="-p" arg="@{projectPath}" />
			<append-arg-if-set var="arguments" optionName="-o" arg="@{outputFile}" />
			<append-arg-if-set var="arguments" optionName="-s" arg="@{properties}" />
			<append-arg-if-set var="arguments" optionName="--config" arg="@{configPath}" />
			<append-arg-if-set var="arguments" optionName="--correlatorName" arg="@{correlatorName}" />

			<java jar="${apama.lib}/generate_project_init_list.jar" fork="true" outputproperty="@{outputproperty}" 
						resultproperty="@{resultproperty}" failonerror="@{failonerror}" dir="@{dir}" logError="true">
				<arg line="${arguments}" />
			</java>
		</sequential>
	</macrodef>


	<!-- GENERATE-EVENT-MODELER-CONFIG : Calculates and writes the event_modeler_config.xml for the project given. All the 
		     project variables will be resolved using properties provided.
	-->
	<macrodef name="generate-event-modeler-config">

		<attribute name="projectPath"/>
		<attribute name="outputFile" default=""/>
		<attribute name="properties" default=""/>
		<attribute name="failonerror" default="true" />
		<attribute name="dir" default="" />
		<attribute name="resultproperty" default="" />

		<sequential>
			<var name="arguments" />
			<append-arg-if-set var="arguments" optionName="-p" arg="@{projectPath}" />
			<append-arg-if-set var="arguments" optionName="-o" arg="@{outputFile}" />
			<append-arg-if-set var="arguments" optionName="-s" arg="@{properties}" />
			<!-- Extra flag inorder to generate Event Modeler Configuration -->
			<append-extra-args var="arguments" extraargs="--generateEventModelerConfig"  />

			<java jar="${apama.lib}/generate_project_init_list.jar" fork="true" resultproperty="@{resultproperty}"
						failonerror="@{failonerror}" dir="@{dir}" logError="true">
				<arg line="${arguments}" />
			</java>
		</sequential>
	</macrodef>

	<!-- ENGINE-RECEIVE: Receive events from the correlator on the given
	     host and port to a given file. The caller can specify the
	     output channels that should be received. By default all
	     channels will be received. -->
	<macrodef name="engine-receive">
		<attribute name="host" default="${correlator.host}" />
		<attribute name="port" default="${correlator.port}" />
		<attribute name="channels" default="" />
		<attribute name="file" />
		<attribute name="suppressBatch" default="false" />
		<attribute name="zeroAtFirstBatch" default="false" />
		<attribute name="reconnect" default="false" />
		<attribute name="qdisconnect" default="false" />
		<attribute name="verbose" default="false" />
		<attribute name="utf8" default="false" />
		<attribute name="timeout" default="5" />
		<attribute name="extraArgs" default="" />
		<attribute name="dir" default="" />
		<sequential>
			<var name="erArgs" />
			<append-arg-if-set var="erArgs" optionName="--hostname" arg="@{host}" />
			<append-arg-if-set var="erArgs" optionName="--port" arg="@{port}" />
			<append-arg-if-set var="erArgs" optionName="--filename" arg="@{file}" />
			<!-- Add channel arguments -->
			<for param="channel" list="@{channels}" delimiter=" ,">
				<sequential>
					<append-arg-if-set var="erArgs" optionName="--channel" arg="@{channel}" />
				</sequential>
			</for>
			<!-- Add flags -->
			<append-arg-if-true var="erArgs" optionName="--suppressBatch" arg="@{suppressBatch}" />
			<append-arg-if-true var="erArgs" optionName="--zeroAtFirstBatch" arg="@{zeroAtFirstBatch}" />
			<append-arg-if-true var="erArgs" optionName="--reconnect" arg="@{reconnect}" />
			<append-arg-if-true var="erArgs" optionName="--qdisconnect" arg="@{qdisconnect}" />
			<append-arg-if-true var="erArgs" optionName="--verbose" arg="@{verbose}" />
			<append-arg-if-true var="erArgs" optionName="--utf8" arg="@{utf8}" />
			<append-extra-args var="erArgs" extraArgs="@{extraArgs}" />

			<exec executable="${apama.bin}/engine_receive${bin.ext}" spawn="true" dir="@{dir}" >
				<arg line="${erArgs}" />
			</exec>

			<waitfor maxwait="@{timeout}" maxwaitunit="second" checkevery="100" checkeveryunit="millisecond" timeoutproperty="engine_receive_timeout">
				<available file="@{file}" />
			</waitfor>
			<fail if="engine_receive_timeout" message="engine-receive timed out while waiting for @{file} to be created" />
		</sequential>
	</macrodef>

	<!-- ENGINE-DELETE: Delete the specified names from the
	     correlator. The clear-correlator macro can be used as a
	     convenient way to delete all names from the correlator. -->
	<macrodef name="engine-delete">
		<attribute name="host" default="${correlator.host}" />
		<attribute name="port" default="${correlator.port}" />
		<attribute name="files" default="" />
		<attribute name="force" default="false" />
		<attribute name="kill" default="false" />
		<attribute name="all" default="false" />
		<attribute name="verbose" default="false" />
		<attribute name="utf8" default="false" />
		<attribute name="names" default="" />
		<attribute name="resultproperty" default="" />
		<attribute name="failonerror" default="true" />
		<attribute name="extraArgs" default="" />
		<attribute name="dir" default="" />
		<sequential>
			<var name="edArgs" />
			<append-arg-if-set var="edArgs" optionName="--hostname" arg="@{host}" />
			<append-arg-if-set var="edArgs" optionName="--port" arg="@{port}" />
			<!-- Add file names to argument line -->
			<for param="file" list="@{files}" delimiter=" ,">
				<sequential>
					<append-arg var="edArgs" arg="--file"/>
					<append-arg var="edArgs" arg="@{file}"/>
				</sequential>
			</for>
			<!-- Add flags to argument line -->
			<append-arg-if-true var="edArgs" optionName="--force" arg="@{force}" />
			<append-arg-if-true var="edArgs" optionName="--kill" arg="@{kill}" />
			<append-arg-if-true var="edArgs" optionName="--all --yes" arg="@{all}" />
			<append-arg-if-true var="edArgs" optionName="--verbose" arg="@{verbose}" />
			<append-arg-if-true var="edArgs" optionName="--utf8" arg="@{utf8}" />
			<append-extra-args var="edArgs" extraArgs="@{extraArgs}" />
			<!-- Add names to argument line -->
			<for param="name" list="@{names}" delimiter=" ,">
				<sequential>
					<append-arg var="edArgs" arg="@{name}"/>
				</sequential>
			</for>
			<exec executable="${apama.bin}/engine_delete${bin.ext}" resultproperty="@{resultproperty}" failonerror="@{failonerror}" dir="@{dir}">
				<arg line="${edArgs}" />
			</exec>
		</sequential>
	</macrodef>

	<!-- CLEAR-CORRELATOR: Run an engine_delete -a -y on the correlator
	     deleting all injected monitor script. -->
	<macrodef name="clear-correlator">
		<attribute name="host" default="${correlator.host}" />
		<attribute name="port" default="${correlator.port}" />
		<attribute name="force" default="false" />
		<attribute name="kill" default="false" />
		<attribute name="resultproperty" default="" />
		<attribute name="failonerror" default="true" />
		<attribute name="dir" default="" />
		<sequential>
			<echo message="Clearing Correlator" />
			<engine-delete host="@{host}" port="@{port}" force="@{force}" kill="@{kill}" all="true" resultproperty="@{resultproperty}" failonerror="@{failonerror}" dir="@{dir}" />
		</sequential>
	</macrodef>

	<!-- ENGINE-CONNECT: Connect a correlator as a receiver to another
	     source correlator. -->
	<macrodef name="engine-connect">
		<attribute name="sourcehost" default="${correlator.host}" />
		<attribute name="sourceport" />
		<attribute name="targethost" default="${correlator.host}" />
		<attribute name="targetport" />
		<attribute name="channel" default="" />
		<attribute name="qdisconnect" default="false" />
		<attribute name="mode" default="legacy" />
		<attribute name="file" default="" />
		<attribute name="utf8" default="false" />
		<attribute name="verbose" default="false" />
		<attribute name="resultproperty" default="" />
		<attribute name="failonerror" default="true" />
		<attribute name="extraArgs" default="" />
		<attribute name="dir" default="" />
		<sequential>
			<var name="ecArgs" />
			<append-arg-if-set var="ecArgs" optionName="--sourcehost" arg="@{sourcehost}" />
			<append-arg-if-set var="ecArgs" optionName="--sourceport" arg="@{sourceport}" />
			<append-arg-if-set var="ecArgs" optionName="--targethost" arg="@{targethost}" />
			<append-arg-if-set var="ecArgs" optionName="--targetport" arg="@{targetport}" />
			<append-arg-if-true var="ecArgs" optionName="--qdisconnect" arg="@{qdisconnect}" />
			<append-arg-if-set var="ecArgs" optionName="--mode" arg="@{mode}" />
			<append-arg-if-set var="ecArgs" optionName="--channel" arg="@{channel}" />
			<append-arg-if-true var="ecArgs" optionName="--utf8" arg="@{utf8}" />
			<append-arg-if-true var="ecArgs" optionName="--verbose" arg="@{verbose}" />
			<append-extra-args var="ecArgs" extraArgs="@{extraArgs}" />

			<if>
				<equals arg1="@{channel}" arg2="" />
				<then>
					<echo message="Connecting @{sourcehost}:@{sourceport} to @{targethost}:@{targetport} using all channels" />
				</then>
				<else>
					<echo message="Connecting @{sourcehost}:@{sourceport} to @{targethost}:@{targetport} using channel @{channel}" />
				</else>
			</if>

			<exec executable="${apama.bin}/engine_connect${bin.ext}" resultproperty="@{resultproperty}" failonerror="@{failonerror}" dir="@{dir}">
				<arg line="${ecArgs}" />
			</exec>
		</sequential>
	</macrodef>

	<!-- LOAD-ENGINE-CONNECT: Reads engine connect configuration from provided deploy file and creates the 
	     necessary connection.   
	-->
	<macrodef name="load-engine-connect">
		<attribute name="configPath" />
		<attribute name="failonerror" default="true" />
		<attribute name="dir" default="" />
		<attribute name="resultproperty" default="" />
		<attribute name="outputproperty" default="engine.connect.out" description="Output property holding the list of engine connect configuration" />
		<sequential>
			<var name="arguments" />
			<append-arg-if-set var="arguments" optionName="--config" arg="@{configPath}" />
			<java classpath="${apama.lib}/generate_project_init_list.jar" classname="com.apama.studio.engineconnect.Main" fork="true" outputproperty="@{outputproperty}" resultproperty="@{resultproperty}" failonerror="@{failonerror}" dir="@{dir}" logError="true">
				<arg line="${arguments}" />
			</java>
			<for param="engineconnectconfig" list="${@{outputproperty}}" delimiter="${line.separator}">
				<sequential>
					<exec executable="${apama.bin}/engine_connect${bin.ext}" resultproperty="@{resultproperty}" failonerror="@{failonerror}" dir="@{dir}">
						<arg line="@{engineconnectconfig}" />
					</exec>
				</sequential>
			</for>
		</sequential>
	</macrodef>

	<!-- ENGINE-MANAGEMENT: Run the engine_management tool. The arg
	     elements can be used to specify which commandline arguments to
	     pass to engine_management. -->
	<macrodef name="engine-management">
		<attribute name="host" default="${correlator.host}" />
		<attribute name="port" default="${correlator.port}" />
		<attribute name="request" default="" />
		<attribute name="parallel" default="true" />
		<attribute name="resultproperty" default="" />
		<attribute name="failonerror" default="true" />
		<attribute name="dir" default="" />
		<element name="args" implicit="true" optional="true" description="Further arguments as arg tags." />
		<sequential>
			<var name="emArgs" />
			<append-arg-if-set var="emArgs" optionName="--hostname" arg="@{host}" />
			<append-arg-if-set var="emArgs" optionName="--port" arg="@{port}" />
			<append-arg-if-set var="emArgs" optionName="--dorequest" arg="@{request}" />

			<exec executable="${apama.bin}/engine_management${bin.ext}" resultproperty="@{resultproperty}" failonerror="@{failonerror}" dir="@{dir}">
				<arg line="${emArgs}" />
				<args />
			</exec>
		</sequential>
	</macrodef>

	<!-- ENGINE-INSPECT: Run inspect the state of the specified
	     correlator. -->
	<macrodef name="engine-inspect">
		<attribute name="host" default="${correlator.host}" />
		<attribute name="port" default="${correlator.port}" />
		<attribute name="output" default="${log.dir}${file.separator}engine_inspect_${LOG_TSTAMP}.log" />
		<attribute name="monitors" default="false" />
		<attribute name="java" default="false" />
		<attribute name="events" default="false" />
		<attribute name="timers" default="false" />
		<attribute name="contexts" default="false" />
		<attribute name="raw" default="false" />
		<attribute name="verbose" default="false" />
		<attribute name="resultproperty" default="" />
		<attribute name="failonerror" default="true" />
		<attribute name="extraArgs" default="" />
		<attribute name="dir" default="" />
		<sequential>
			<var name="eiArgs" />
			<append-arg-if-set var="eiArgs" optionName="--hostname" arg="@{host}" />
			<append-arg-if-set var="eiArgs" optionName="--port" arg="@{port}" />
			<append-arg-if-true var="eiArgs" optionName="--monitors" arg="@{monitors}" />
			<append-arg-if-true var="eiArgs" optionName="--java" arg="@{java}" />
			<append-arg-if-true var="eiArgs" optionName="--events" arg="@{events}" />
			<append-arg-if-true var="eiArgs" optionName="--timers" arg="@{timers}" />
			<append-arg-if-true var="eiArgs" optionName="--contexts" arg="@{contexts}" />
			<append-arg-if-true var="eiArgs" optionName="--raw" arg="@{raw}" />
			<append-arg-if-true var="eiArgs" optionName="--verbose" arg="@{verbose}" />
			<append-extra-args var="eiArgs" extraArgs="@{extraArgs}" />

			<echo message="Inspecting correlator on @{host}:@{port}" />
			<exec executable="${apama.bin}/engine_inspect${bin.ext}"
					output="@{output}"
					resultproperty="@{resultproperty}" failonerror="@{failonerror}" dir="@{dir}">
				<arg line="${eiArgs}" />
			</exec>
		</sequential>
	</macrodef>


	<!-- ENGINE-PACKAGE: Package monitorscript files into Correlator 
	     Deployment Packages. The file name(s) can be specified in 'files' or
	.....you can specifiy them in an XML filelist using 'filelistid', also you
	     can specify a manifest file by setting 'manifest'-->
	<macrodef name="engine-package">
		<attribute name="files" default="" />
		<attribute name="filelistid" default="" />
		<attribute name="output" default="" />
		<attribute name="utf8" default="false" />
		<attribute name="manifest" default="" />
		<attribute name="resultproperty" default="" />
		<attribute name="failonerror" default="true" />
		<attribute name="dir" default="" />
		<sequential>
			<var name="eiArgs" />
			<append-arg-if-set var="eiArgs" optionName="--output" arg="@{output}" />
			<append-arg-if-true var="eiArgs" optionName="--utf8" arg="@{utf8}" />
			<append-arg-if-set var="eiArgs" optionName="--manifest" arg="@{manifest}" />
			<var name="cdpfiles.unsorted" value="" />
			<sortlist property="cdpfiles" value="${cdpfiles.unsorted}" delimiter="," />
			<if>
				<equals arg1="@{files}" arg2="" />
				<then>
					<if>
						<not>
							<equals arg1="@{filelistid}" arg2="" />
						</not>
						<then>
							<sequential>
								<!-- Loop throught the files referenced in filelistid -->
								<for param="val">
									<path>
										<filelist refid="@{filelistid}" />
									</path>
									<sequential>
										<propertyregex property="tmp.ext" override="true" input="@{val}" regexp="([^.]*)$" select="\1" />
										<switch value="${tmp.ext}">
											<case value="mon">
												<append-arg-if-set var="cdpfiles" arg="@{val}" quote="" />
											</case>
											<default>
												<echo message="Unknown file extension: ${tmp.ext}, file @{val} - accepts mon" />
											</default>
										</switch>
									</sequential>
								</for>
							</sequential>
						</then>
					</if>
				</then>
				<else>
					<sequential>
						<!-- Loop throught the files within the ',' delimited string -->
						<for list="@{files}" delimiter="," param="val">
							<sequential>
								<propertyregex property="tmp.ext" override="true" input="@{val}" regexp="([^.]*)$" select="\1" />
								<switch value="${tmp.ext}">
									<case value="mon">
										<append-arg-if-set var="cdpfiles" arg="@{val}" quote="" />
									</case>
									<default>
										<echo message="Unknown file extension: ${tmp.ext}, file @{val} - accepts mon" />
									</default>
								</switch>
							</sequential>
						</for>
					</sequential>
				</else>
			</if>
			<!-- Execute engine-package -->
			<if>
				<not>
					<equals arg1="${cdpfiles}" arg2="" />
				</not>
				<then>
					<echo message="Packaging file(s) to [output=@{output}]" />
					<exec executable="${apama.bin}/engine_package${bin.ext}" resultproperty="@{resultproperty}" failonerror="@{failonerror}" dir="@{dir}">
						<arg line="${eiArgs}" />
						<arg line="${cdpfiles}" />
					</exec>
				</then>
				<else>
					<if>
						<not>
							<equals arg1="@{manifest}" arg2="" />
						</not>
						<then>
							<echo message="Packaging file(s) to [output=@{output}]" />
							<exec executable="${apama.bin}/engine_package${bin.ext}" resultproperty="@{resultproperty}" failonerror="@{failonerror}" dir="@{dir}">
								<arg line="${eiArgs}" />
							</exec>
						</then>
						<else>
							<echo message="You must specify some files to include in the package, either through use of file, filelistid, or manifest arguments"/>
						</else>
					</if>
				</else>
			</if>
		</sequential>
	</macrodef>
	<!-- #### End of Correlator macros #### -->

	<!-- #### Engine Management macros #### -->
	<macrodef name="application-event-logging">
		<attribute name="host" default="${correlator.host}" />
		<attribute name="port" default="${correlator.port}" />
		<attribute name="value" default="on" />
		<attribute name="resultproperty" default="" />
		<attribute name="failonerror" default="true" />
		<attribute name="dir" default="" />
		<sequential>
			<engine-management-request host="@{host}" port="@{port}" request="applicationEventLogging" value="@{value}"
				resultproperty="@{resultproperty}" failonerror="@{failonerror}" dir="@{dir}" />
		</sequential>
	</macrodef>

	<macrodef name="profiling">
		<attribute name="host" default="${correlator.host}" />
		<attribute name="port" default="${correlator.port}" />
		<attribute name="value" default="on" />
		<attribute name="resultproperty" default="" />
		<attribute name="failonerror" default="true" />
		<attribute name="dir" default="" />
		<sequential>
			<engine-management-request host="@{host}" port="@{port}" request="profiling" value="@{value}"
				resultproperty="@{resultproperty}" failonerror="@{failonerror}" dir="@{dir}" />
		</sequential>
	</macrodef>

	<macrodef name="to-string-all">
		<attribute name="host" default="${correlator.host}" />
		<attribute name="port" default="${correlator.port}" />
		<attribute name="resultproperty" default="" />
		<attribute name="failonerror" default="true" />
		<attribute name="dir" default="" />
		<sequential>
			<engine-management-request host="@{host}" port="@{port}" request="toStringAll"
				resultproperty="@{resultproperty}" failonerror="@{failonerror}" dir="@{dir}" />
		</sequential>
	</macrodef>

	<macrodef name="get-types">
		<attribute name="host" default="${correlator.host}" />
		<attribute name="port" default="${correlator.port}" />
		<attribute name="value" default="" />
		<attribute name="resultproperty" default="" />
		<attribute name="failonerror" default="true" />
		<attribute name="dir" default="" />
		<sequential>
			<engine-management-request host="@{host}" port="@{port}" request="getTypes" value="@{value}"
				resultproperty="@{resultproperty}" failonerror="@{failonerror}" dir="@{dir}" />
		</sequential>
	</macrodef>

	<macrodef name="set-application-log-file">
		<attribute name="host" default="${correlator.host}" />
		<attribute name="port" default="${correlator.port}" />
		<attribute name="filename" />
		<attribute name="package" default="" />
		<attribute name="resultproperty" default="" />
		<attribute name="failonerror" default="true" />
		<attribute name="dir" default="" />
		<sequential>
			<var name="salfArgs" value="@{filename}" />
			<append-arg-if-set var="salfArgs" arg="@{package}" quote="" />
			<engine-management-request host="@{host}" port="@{port}" request="setApplicationLogFile" value="${salfArgs}"
				resultproperty="@{resultproperty}" failonerror="@{failonerror}" dir="@{dir}" />
		</sequential>
	</macrodef>

	<macrodef name="set-application-log-level">
		<attribute name="host" default="${correlator.host}" />
		<attribute name="port" default="${correlator.port}" />
		<attribute name="level" />
		<attribute name="package" default="" />
		<attribute name="resultproperty" default="" />
		<attribute name="failonerror" default="true" />
		<attribute name="dir" default="" />
		<sequential>
			<var name="sallArgs" value="@{level}" />
			<append-arg-if-set var="sallArgs" arg="@{package}" quote="" />
			<engine-management-request host="@{host}" port="@{port}" request="setApplicationLogLevel" value="${sallArgs}"
				resultproperty="@{resultproperty}" failonerror="@{failonerror}" dir="@{dir}" />
		</sequential>
	</macrodef>

	<macrodef name="get-application-log-file">
		<attribute name="host" default="${correlator.host}" />
		<attribute name="port" default="${correlator.port}" />
		<attribute name="package" default="" />
		<attribute name="resultproperty" default="" />
		<attribute name="failonerror" default="true" />
		<attribute name="dir" default="" />
		<sequential>
			<engine-management-request host="@{host}" port="@{port}" request="getApplicationLogFile" value="@{package}"
				resultproperty="@{resultproperty}" failonerror="@{failonerror}" dir="@{dir}" />
		</sequential>
	</macrodef>

	<macrodef name="get-application-log-level">
		<attribute name="host" default="${correlator.host}" />
		<attribute name="port" default="${correlator.port}" />
		<attribute name="package" default="" />
		<attribute name="resultproperty" default="" />
		<attribute name="failonerror" default="true" />
		<attribute name="dir" default="" />
		<sequential>
			<engine-management-request host="@{host}" port="@{port}" request="getApplicationLogLevel" value="@{package}"
				resultproperty="@{resultproperty}" failonerror="@{failonerror}" dir="@{dir}" />
		</sequential>
	</macrodef>

	<macrodef name="unset-application-log-file">
		<attribute name="host" default="${correlator.host}" />
		<attribute name="port" default="${correlator.port}" />
		<attribute name="package" default="" />
		<attribute name="resultproperty" default="" />
		<attribute name="failonerror" default="true" />
		<attribute name="dir" default="" />
		<sequential>
			<engine-management-request host="@{host}" port="@{port}" request="unsetApplicationLogFile" value="@{package}"
				resultproperty="@{resultproperty}" failonerror="@{failonerror}" dir="@{dir}" />
		</sequential>
	</macrodef>

	<macrodef name="unset-application-log-level">
		<attribute name="host" default="${correlator.host}" />
		<attribute name="port" default="${correlator.port}" />
		<attribute name="package" default="" />
		<attribute name="resultproperty" default="" />
		<attribute name="failonerror" default="true" />
		<attribute name="dir" default="" />
		<sequential>
			<engine-management-request host="@{host}" port="@{port}" request="unsetApplicationLogLevel" value="@{package}"
				resultproperty="@{resultproperty}" failonerror="@{failonerror}" dir="@{dir}" />
		</sequential>
	</macrodef>

	<macrodef name="verbosegc">
		<attribute name="host" default="${correlator.host}" />
		<attribute name="port" default="${correlator.port}" />
		<attribute name="value" default="on" />
		<attribute name="resultproperty" default="" />
		<attribute name="failonerror" default="true" />
		<attribute name="dir" default="" />
		<sequential>
			<engine-management-request host="@{host}" port="@{port}" request="verbosegc" value="@{value}"
				resultproperty="@{resultproperty}" failonerror="@{failonerror}" dir="@{dir}" />
		</sequential>
	</macrodef>

	<macrodef name="log-mark">
		<attribute name="host" default="${correlator.host}" />
		<attribute name="port" default="${correlator.port}" />
		<attribute name="message" default="apama-macros.xml:log-mark" />
		<attribute name="resultproperty" default="" />
		<attribute name="failonerror" default="true" />
		<attribute name="dir" default="" />
		<sequential>
			<engine-management-request host="@{host}" port="@{port}" request="logMark" value="@{message}"
				resultproperty="@{resultproperty}" failonerror="@{failonerror}" dir="@{dir}" />
		</sequential>
	</macrodef>

	<macrodef name="rotate-input-log">
		<attribute name="host" default="${correlator.host}" />
		<attribute name="port" default="${correlator.port}" />
		<attribute name="resultproperty" default="" />
		<attribute name="failonerror" default="true" />
		<attribute name="dir" default="" />
		<sequential>
			<engine-management-request host="@{host}" port="@{port}" request="rotateInputLog" value=""
				resultproperty="@{resultproperty}" failonerror="@{failonerror}" dir="@{dir}" />
		</sequential>
	</macrodef>

	<macrodef name="reopen-log">
		<attribute name="host" default="${correlator.host}" />
		<attribute name="port" default="${correlator.port}" />
		<attribute name="resultproperty" default="" />
		<attribute name="failonerror" default="true" />
		<attribute name="dir" default="" />
		<sequential>
			<engine-management-request host="@{host}" port="@{port}" request="reopenLog" value=""
				resultproperty="@{resultproperty}" failonerror="@{failonerror}" dir="@{dir}" />
		</sequential>
	</macrodef>

	<macrodef name="set-log-file">
		<attribute name="host" default="${correlator.host}" />
		<attribute name="port" default="${correlator.port}" />
		<attribute name="filename" />
		<attribute name="resultproperty" default="" />
		<attribute name="failonerror" default="true" />
		<attribute name="dir" default="" />
		<sequential>
			<engine-management-request host="@{host}" port="@{port}" request="setLogFile" value="@{filename}"
				resultproperty="@{resultproperty}" failonerror="@{failonerror}" dir="@{dir}" />
		</sequential>
	</macrodef>

	<macrodef name="engine-management-request">
		<attribute name="host" default="${correlator.host}" />
		<attribute name="port" default="${correlator.port}" />
		<attribute name="request" />
		<attribute name="value" default="" />
		<attribute name="resultproperty" default="" />
		<attribute name="failonerror" default="true" />
		<attribute name="dir" default="" />
		<sequential>
			<var name="emrArgs" value="@{request}" />

			<switch value="@{request}">
				<!-- Verify 'profiling' argument -->
				<case value="profiling">
					<switch value="@{value}">
						<case value="on">
							<append-arg var="emrArgs" arg="on" quote="" />
						</case>
						<case value="off">
							<append-arg var="emrArgs" arg="off" quote="" />
						</case>
						<case value="get">
							<append-arg var="emrArgs" arg="get" quote="" />
						</case>
						<case value="gettotal">
							<append-arg var="emrArgs" arg="gettotal" quote="" />
						</case>
						<case value="reset">
							<append-arg var="emrArgs" arg="reset" quote="" />
						</case>
						<default>
							<fail message="engine-management-request - Invalid value: @{value} - @{request} accepts on, off, get, gettotal, and reset" />
						</default>
					</switch>
				</case>
				<!-- Verify 'applicationEventLogging' argument -->
				<case value="applicationEventLogging">
					<switch value="@{value}">
						<case value="on">
							<append-arg var="emrArgs" arg="on" quote="" />
						</case>
						<case value="off">
							<append-arg var="emrArgs" arg="off" quote="" />
						</case>
						<default>
							<fail message="engine-management-request - Invalid value: @{value} - @{request} accepts on and off" />
						</default>
					</switch>
				</case>
				<!-- Verify 'toStringAll' argument -->
				<case value="toStringAll">
					<switch value="@{value}">
						<case value="" />
						<default>
							<fail message="engine-management-request - Invalid value: @{value} - @{request} takes no arguments" />
						</default>
					</switch>
				</case>
				<!-- Verify 'getTypes' argument -->
				<case value="getTypes">
					<switch value="@{value}">
						<case value="" />
						<case value="-xml">
							<append-arg var="emrArgs" arg="-xml" quote="" />
						</case>
						<default>
							<fail message="engine-management-request - Invalid value: @{value} - @{request} accepts -xml or no argument" />
						</default>
					</switch>
				</case>
				<!-- Verify 'setApplicationLogFile' argument -->
				<case value="setApplicationLogFile">
					<switch value="@{value}">
						<case value="">
							<fail message="engine-management-request - @{request} requires a filename argument" />
						</case>
						<default>
							<append-arg var="emrArgs" arg="@{value}" quote="" />
						</default>
					</switch>
				</case>
				<!-- Verify 'setApplicationLogLevel' argument -->
				<!-- TODO: should we have FORCE here as well? -->
				<case value="setApplicationLogLevel">
					<if>
						<matches pattern="OFF|CRIT|FATAL|ERROR|WARN|INFO|DEBUG" string="@{value}"/>
						<then>
							<append-arg var="emrArgs" arg="@{value}" quote="" />
						</then>
						<else>
							<fail message="engine-management-request - Invalid log level: @{value} - @{request} accepts OFF, CRIT, FATAL, ERROR, WARN, INFO, and DEBUG" />
						</else>
					</if>
				</case>
				<!-- Verify 'getApplicationLogFile' argument -->
				<case value="getApplicationLogFile">
					<append-arg-if-set var="emrArgs" arg="@{value}" quote="" />
				</case>
				<!-- Verify 'getApplicationLogLevel' argument -->
				<case value="getApplicationLogLevel">
					<append-arg-if-set var="emrArgs" arg="@{value}" quote="" />
				</case>
				<!-- Verify 'unsetApplicationLogFile' argument -->
				<case value="unsetApplicationLogFile">
					<append-arg-if-set var="emrArgs" arg="@{value}" quote="" />
				</case>
				<!-- Verify 'unsetApplicationLogLevel' argument -->
				<case value="unsetApplicationLogLevel">
					<append-arg-if-set var="emrArgs" arg="@{value}" quote="" />
				</case>
				<!-- Verify 'verbosegc' argument -->
				<case value="verbosegc">
					<switch value="@{value}">
						<case value="on">
							<append-arg var="emrArgs" arg="on" quote="" />
						</case>
						<case value="off">
							<append-arg var="emrArgs" arg="off" quote="" />
						</case>
						<default>
							<fail message="engine-management-request - Invalid value: @{value} - @{request} accepts on and off" />
						</default>
					</switch>
				</case>
				<!-- Verify 'logMark' argument - not necessary -->
				<case value="logMark">
					<append-arg var="emrArgs" arg="@{value}" quote="" />
				</case>
				<!-- Verify 'rotateInputLog' argument -->
				<case value="rotateInputLog">
					<switch value="@{value}">
						<case value="" />
						<default>
							<fail message="engine-management-request - Invalid value: @{value} - @{request} takes no arguments" />
						</default>
					</switch>
				</case>
				<!-- Verify 'reopenLog' argument -->
				<case value="reopenLog">
					<switch value="@{value}">
						<case value="" />
						<default>
							<fail message="engine-management-request - Invalid value: @{value} - @{request} takes no arguments" />
						</default>
					</switch>
				</case>
				<!-- Verify 'setLogFile' argument -->
				<case value="setLogFile">
					<switch value="@{value}">
						<case value="">
							<fail message="engine-management-request - @{request} requires a filename argument" />
						</case>
						<default>
							<append-arg var="emrArgs" arg="@{value}" quote="" />
						</default>
					</switch>
				</case>
				<!-- Invalid request -->
				<default>
					<fail message="engine-management-request - Invalid request: @{request}" />
				</default>
			</switch>

			<echo message="engine-management-request: ${emrArgs}" />

			<engine-management host="@{host}" port="@{port}" request="${emrArgs}" resultproperty="@{resultproperty}" failonerror="@{failonerror}" dir="@{dir}" />
		</sequential>
	</macrodef>

	<!-- #### End of Engine Management macros #### -->

	<!-- #### IAF macros #### -->
	<!-- START-IAF: Start a new IAF process. This macros will first
	     verify that an IAF process is not already running on the given
	     port, then start the new process, and finally check that the
	     new process is reachable with iaf_management. -->
	<macrodef name="start-iaf">
		<attribute name="port" default="${iaf.port}" />
		<attribute name="name" default="iaf_@{port}" />
		<attribute name="log" default="${log.dir}${file.separator}@{name}_${LOG_TSTAMP}.log" />
		<attribute name="loglevel" default="INFO" />
		<attribute name="logTruncate" default="false" />
		<attribute name="xconfig" default="" />
		<attribute name="config" />
		<attribute name="propsFile" default="" />
		<attribute name="waitperiod" default="${startcomponent.waitperiod}" />
		<attribute name="console" default="false" />
		<attribute name="extraArgs" default="" />
		<attribute name="dir" default="" />
		<sequential>
			<wait-for-iaf port="@{port}" waitperiod="2" resultproperty="iaf.@{port}.inittest" failonerror="false" dir="@{dir}" />
			<if>
				<not>
					<equals arg1="${iaf.@{port}.inittest}" arg2="0" />
				</not>
				<then>
					<run-iaf port="@{port}" log="@{log}" loglevel="@{loglevel}"
						logTruncate="@{logTruncate}" name="@{name}" xconfig="@{xconfig}"
						config="@{config}" propsfile="@{propsFile}" console="@{console}" 
						extraArgs="@{extraArgs}" dir="@{dir}" />
					<wait-for-iaf port="@{port}" waitperiod="@{waitperiod}" resultproperty="iaf.@{port}.runtest" failonerror="false" dir="@{dir}" />
					<if>
						<not>
							<equals arg1="${iaf.@{port}.runtest}" arg2="0" />
						</not>
						<then>
							<fail message="Did not start IAF!" />
						</then>
					</if>
				</then>
			</if>
		</sequential>
	</macrodef>

	<!-- RUN-IAF: This is a low level macro used to start an IAF
	     process. Use the start-iaf macro to actually start IAF
	     instances since it checks that the process has come up. -->
	<macrodef name="run-iaf">
		<attribute name="port" default="${iaf.port}" />
		<attribute name="name" default="iaf_@{port}" />
		<attribute name="log" default="${log.dir}${file.separator}@{name}_${LOG_TSTAMP}.log" />
		<attribute name="logLevel" default="INFO" />
		<attribute name="logTruncate" default="false" />
		<attribute name="xconfig" default="" />
		<attribute name="config" />
		<attribute name="propsFile" default="" />
		<attribute name="console" default="false" />
		<attribute name="extraArgs" default="" />
		<attribute name="dir" default="" />
		<sequential>
			<var name="riArgs" />
			<append-arg-if-set var="riArgs" optionName="--port" arg="@{port}" />
			<append-arg-if-set var="riArgs" optionName="--name" arg="@{name}" />
			<append-arg-if-set var="riArgs" optionName="--logfile" arg="@{log}" />
			<append-arg-if-set var="riArgs" optionName="--loglevel" arg="@{logLevel}" />
			<append-arg-if-true var="riArgs" optionName="--truncate" arg="@{logTruncate}" />
			<append-arg-if-set var="riArgs" optionName="-Xconfig" arg="@{xconfig}" />
			<append-extra-args var="riArgs" extraArgs="@{extraArgs}" />

			<generate-iaf-config var="riArgs" config="@{config}" propsFile="@{propsFile}" />

			<echo message="Starting iaf with args: ${riArgs}" />
			<if>
				<and>
					<istrue value="@{console}" />
					<equals arg1="${osfamily}" arg2="windows" />
				</and>
				<then>
					<var name="riArgs" value="/c start 'IAF p:@{port}' /min '${apama.bin}/iaf${bin.ext}' ${riArgs}" />
					<exec executable="cmd" spawn="true" dir="@{dir}" >
						<arg line="${riArgs}" />
					</exec>
				</then>
				<else>
					<exec executable="${apama.bin}/iaf${bin.ext}" spawn="true" dir="@{dir}" >
						<arg line="${riArgs}" />
					</exec>
				</else>
			</if>
		</sequential>
	</macrodef>

	<!-- WAIT-FOR-IAF: This macro uses the iaf-management macro to wait
	     for an IAF process to start up. The macro will wait for the
	     specified length of time. -->
	<macrodef name="wait-for-iaf">
		<attribute name="host" default="${iaf.host}" />
		<attribute name="port" default="${iaf.port}" />
		<attribute name="waitperiod" default="-1" />
		<attribute name="resultproperty" default="" />
		<attribute name="failonerror" default="true" />
		<attribute name="dir" default="" />
		<sequential>
			<var name="wfiArgs" />
			<if>
				<equals arg1="@{waitperiod}" arg2="-1" />
				<then>
					<echo message="Waiting for IAF on port @{port}" />
					<append-arg var="wfiArgs" arg="--wait" quote="" />
				</then>
				<else>
					<echo message="Waiting @{waitperiod} secs for IAF on port @{port}" />
					<append-arg var="wfiArgs" arg="--waitFor" quote="" />
					<append-arg var="wfiArgs" arg="@{waitperiod}" quote="" />
				</else>
			</if>
			<iaf-management host="@{host}" port="@{port}" resultproperty="@{resultproperty}" failonerror="@{failonerror}" dir="@{dir}">
				<arg line="${wfiArgs}" />
			</iaf-management>
		</sequential>
	</macrodef>

	<!-- KILL-IAF: Stop an IAF process on a given host and port -->
	<macrodef name="kill-iaf">
		<attribute name="host" default="${iaf.host}" />
		<attribute name="port" default="${iaf.port}" />
		<attribute name="resultproperty" default="" />
		<attribute name="failonerror" default="true" />
		<attribute name="dir" default="" />
		<sequential>
			<echo message="Stopping IAF on @{host}:@{port}" />
			<iaf-management host="@{host}" port="@{port}" resultproperty="@{resultproperty}" failonerror="@{failonerror}" dir="@{dir}">
				<arg value="--shutdown" />
				<arg value="apama-macros.xml:kill-iaf" />
			</iaf-management>
		</sequential>
	</macrodef>

	<!-- IAF-MANAGEMENT: Run the iaf_management tool. The arg elements
	     can be used to specify which commandline arguments to pass to
	     iaf_management. -->
	<macrodef name="iaf-management">
		<attribute name="host" default="${iaf.host}" />
		<attribute name="port" default="${iaf.port}" />
		<attribute name="parallel" default="true" />
		<attribute name="resultproperty" default="" />
		<attribute name="failonerror" default="true" />
		<attribute name="dir" default="" />
		<element name="args" implicit="true" optional="true" description="Further arguments as arg tags." />
		<sequential>
			<var name="imArgs" />
			<append-arg-if-set var="imArgs" optionName="--hostname" arg="@{host}" />
			<append-arg-if-set var="imArgs" optionName="--port" arg="@{port}" />

			<exec executable="${apama.bin}/iaf_management${bin.ext}" resultproperty="@{resultproperty}" failonerror="@{failonerror}" dir="@{dir}">
				<arg line="${imArgs}" />
				<args />
			</exec>
		</sequential>
	</macrodef>

	<!-- START-ALL-IAF: This macro is used to start a number of IAF
	     processes. The macro looks for properties in the Ant
	     environment that have an .iaf_port suffix, the first part of
	     such properties is taken as a name for an IAF instance. Each
	     IAF instance is then started with port=<name>.iaf_port,
	     log=<name>.log, loglevel=<name>.loglevel, config=<name>.config,
	     and propsFile=<name>.propsFile. A suitable configuration for
	     start-all-iaf with two IAF instances would be:

			 foo.iaf_port="12345"
			 foo.log="foo.log"
			 foo.loglevel="INFO"
			 foo.config="foo.config"
			 foo.propsFile="foo.props"
			 bar.iaf_port="12345"
			 bar.log="bar.log"
			 bar.loglevel="INFO"
			 bar.config="bar.config"
			 bar.propsFile="bar.props" -->
	<macrodef name="start-all-iaf">
		<attribute name="extraArgs" default="" />
		<attribute name="dir" default="" />
		<sequential>
			<var name="iaf_names.unsorted" value=""/>
			<propertyselector property="iaf_names.unsorted" override="true" distinct="true" delimiter="," match="([^\.]+).iaf_port" select="\1" />
			<sortlist property="iaf_names" value="${iaf_names.unsorted}" delimiter="," />
			<!-- otherwise order is nondetermistic, and based on internal ant dictionary implementation -->
			<for list="${iaf_names}" delimiter="," param="name">
				<sequential>
					<var name="saiArgs" value="" />
					<if>
						<isset property="${@{name}.extraArgs}" />
						<then>
							<append-arg-if-set var="saiArgs" arg="${@{name}.extraArgs}" />
						</then>
					</if>
					<append-extra-args var="saiArgs" extraArgs="@{extraArgs}" />

					<!-- set default logfile and level if not explicitly specified -->
					<if>
						<isset property="@{name}.log"/>
						<then>
							<var name="log" value="${@{name}.log}"/>
						</then>
						<else>
							<var name="log" value="@{name}_${@{name}.iaf_port}_${LOG_TSTAMP}.log" />
						</else>
					</if>
					<if>
						<isset property="@{name}.loglevel"/>
						<then>
							<var name="loglevel" value="${@{name}.loglevel}"/>
						</then>
						<else>
							<var name="loglevel" value="INFO" />
						</else>
					</if>

					<!-- ensure log file is a qualified path -->
					<if>
						<not>
							<or>
								<contains string="${log}" substring="/"/>
								<contains string="${log}" substring="\"/>
								<contains string="${log}" substring="${file.separator}"/>
							</or>
						</not>
						<then>
							<var name="log" value="${log.dir}${file.separator}${log}"/>
						</then>
					</if>

					<start-iaf port="${@{name}.iaf_port}" log="${log}" loglevel="${loglevel}" name="@{name}" config="${build.dir}/${@{name}.config}" propsFile="${build.dir}/${@{name}.propsFile}" extraArgs="${saiArgs}" dir="@{dir}" />
				</sequential>
			</for>
		</sequential>
	</macrodef>

	<!-- KILL-ALL-IAF: Kill all IAF instances that were started with
	     start-all-iaf - the macro looks for similar properties in the
	     Ant environment. If start-all-iaf is working for you, then
	     kill-all-iaf should work automatically. -->
	<macrodef name="kill-all-iaf">
		<attribute name="resultproperty" default="" />
		<attribute name="failonerror" default="true" />
		<attribute name="dir" default="" />
		<sequential>
			<property name="iaf_names" value="" />
			<propertyselector property="iaf_names" override="true" delimiter="," match="([^\.]+).iaf_port" select="\1" />
			<for list="${iaf_names}" delimiter="," param="type">
				<sequential>
					<kill-iaf port="${@{type}.iaf_port}" resultproperty="@{resultproperty}" failonerror="@{failonerror}" dir="@{dir}" />
				</sequential>
			</for>
		</sequential>
	</macrodef>

	<!-- IAF-EVENTS-DUMP: Dump event definitions based on the iaf config
	     into a given file. -->
	<macrodef name="iaf-events-dump">
		<attribute name="config" />
		<attribute name="propsFile" default="" />
		<attribute name="dstFile" />
		<attribute name="resultproperty" default="" />
		<attribute name="failonerror" default="true" />
		<attribute name="dir" default="" />
		<sequential>
			<var name="iedArgs" />
			<append-arg var="iedArgs" arg="--events" />

			<generate-iaf-config var="iedArgs" config="@{config}" propsFile="@{propsFile}" />

			<echo message="Starting iaf with args: ${iedArgs}" />
			<exec executable="${apama.bin}/iaf${bin.ext}" 
					output="@{dstFile}" resultproperty="@{resultproperty}" 
					failonerror="@{failonerror}" dir="@{dir}">
				<arg line="${iedArgs}" />
			</exec>
		</sequential>
	</macrodef>

	<!-- GENERATE-IAF-CONFIG: This is a helper macro that is used to
			 generate an iaf config file by replacing all @FOO@ type
			 variables in a given config file template with values defined
			 in a property file. The system allows for another level of
			 indirection where the property file can contain Ant style
			 property references (${foo}) that are then filled in from a
			 given Java properties file. -->
	<macrodef name="generate-iaf-config">
		<attribute name="var" />
		<attribute name="config" />
		<attribute name="propsFile" />
		<sequential>
			<if>
				<equals arg1="@{propsFile}" arg2="" />
				<then>
					<append-arg var="@{var}" arg="@{config}" />
				</then>
				<else>
					<copy file="@{propsFile}" tofile="@{propsFile}.out" overwrite="true">
						<filterchain>
							<tokenfilter>
								<replacestring from="$" to="" />
								<replacestring from="{" to="@" />
								<replacestring from="}" to="@" />
							</tokenfilter>
						</filterchain>
						<filterset begintoken="@" endtoken="@">
							<filter token="Default Correlator.hostname" value="${Default Correlator.hostname}" />
							<filter token="Default Correlator.port" value="${Default Correlator.port}" />
							<filter token="apama_home" value="${apama_home}" />
						</filterset>
					</copy>

					<replace file="@{propsFile}.out" token="\" value="/" />

					<if>
						<available property="environment.properties.exists" file="environment.properties" />
						<then>
							<copy file="@{config}" tofile="@{config}.out" overwrite="true" outputencoding="utf-8">
								<filterset begintoken="@" endtoken="@">
									<filtersfile file="@{propsFile}.out" />
									<filtersfile file="environment.properties"/>
								</filterset>
							</copy>
						</then>
						<else>
							<copy file="@{config}" tofile="@{config}.out" overwrite="true" outputencoding="utf-8">
								<filterset begintoken="@" endtoken="@">
									<filtersfile file="@{propsFile}.out" />
								</filterset>
							</copy>
						</else>
					</if>
					<append-arg var="@{var}" arg="@{config}.out" />
				</else>
			</if>
		</sequential>
	</macrodef>
	<!-- #### End of IAF macros #### -->

	<!-- #### Scenario macros #### -->
	<!-- RUN-EVENT-MODELER: a helper macro for running event_modeler.jar
	     as a Java application. -->
	<macrodef name="run-event-modeler">
		<attribute name="argString" default="" />
		<attribute name="headless" default="false" />
		<attribute name="resultproperty" default="" />
		<attribute name="failonerror" default="true" />
		<attribute name="extraArgs" default="" />
		<attribute name="dir" default="" />
		<sequential>
			<var name="remArgs" />
			<append-arg var="remArgs" arg="@{argString}" quote="" />
			<append-extra-args var="remArgs" extraArgs="@{extraArgs}" />

			<java jar="${apama.lib}/event_modeler.jar" fork="true" resultproperty="@{resultproperty}" failonerror="@{failonerror}" dir="@{dir}">
				<jvmarg value="-Djava.awt.headless=@{headless}" />
				<jvmarg value="-DAPAMA_WORK=${apama.work}" />
				<jvmarg value="-Xmx256m" />
				<arg line="${remArgs}" />
			</java>
		</sequential>
	</macrodef>

	<!-- GENERATE-BLOCK: Generate a block definition file from a
	     scenario definition. -->
	<macrodef name="generate-block">
		<attribute name="srcfile" />
		<attribute name="destfile" />
		<attribute name="catalog" default="${catalogs.dir}" />
		<attribute name="debug" default="false" />
		<attribute name="config" default="${event_modeler.config}" />
		<attribute name="log" default="${log.dir}/event_modeler.log" />
		<attribute name="resultproperty" default="" />
		<attribute name="failonerror" default="true" />
		<attribute name="extraArgs" default="" />
		<attribute name="dir" default="" />
		<sequential>
			<var name="gbArgs" />
			<append-arg-if-set var="gbArgs" optionName="-c" arg="@{config}" />
			<append-arg-if-set var="gbArgs" optionName="-XgenerateBlock" arg="@{srcfile}' '@{destfile}' '@{catalog}" quote="'" />
			<append-arg-if-set var="gbArgs" optionName="-XgenerateDebug" arg="@{debug}" />
			<append-arg-if-set var="gbArgs" optionName="--logfile" arg="@{log}" />

			<run-event-modeler argString="${gbArgs}" headless="true" resultproperty="@{resultproperty}" 
			                   failonerror="@{failonerror}" extraArgs="@{extraArgs}" dir="@{dir}" />
		</sequential>
	</macrodef>

	<!-- GENERATE-SCENARIO: Generate a monitorscript file from a
	     scenario definition. -->
	<macrodef name="generate-scenario">
		<attribute name="srcfile" />
		<attribute name="destfile" />
		<attribute name="debug" default="false" />
		<attribute name="config" default="${event_modeler.config}" />

		<attribute name="log" default="${log.dir}/event_modeler.log" />
		<attribute name="resultproperty" default="" />
		<attribute name="failonerror" default="true" />
		<attribute name="extraArgs" default="" />
		<attribute name="dir" default="" />
		<sequential>
			<var name="scenarioOutputDir" unset="true"/>
			<dirname property="scenarioOutputDir" file="@{destfile}" />
			<mkdir dir="${scenarioOutputDir}"/>

			<var name="gsArgs" />

			<append-arg-if-set var="gsArgs" optionName="-c" arg="@{config}" />
			<append-arg-if-set var="gsArgs" optionName="-Xgenerate" arg="@{srcfile}' '@{destfile}" quote="'" />
			<append-arg-if-set var="gsArgs" optionName="-XgenerateDebug" arg="@{debug}" />
			<append-arg-if-set var="gsArgs" optionName="--logfile" arg="@{log}" />

			<run-event-modeler argString="${gsArgs}" headless="true" resultproperty="@{resultproperty}" 
			                   failonerror="@{failonerror}" extraArgs="@{extraArgs}" dir="@{dir}" />
		</sequential>
	</macrodef>

	<!-- INJECT-SCENARIO: Generate a monitorscript file from a scenario
	     definition and inject it into the correlator. -->
	<macrodef name="inject-scenario">
		<attribute name="host" default="${correlator.host}" />
		<attribute name="port" default="${correlator.port}" />
		<attribute name="srcfile" />
		<attribute name="destfile" />
		<attribute name="debug" default="false" />
		<attribute name="config" default="${event_modeler.config}" />
		<attribute name="resultproperty" default="" />
		<attribute name="failonerror" default="true" />
		<attribute name="dir" default="" />

		<sequential>
			<generate-scenario srcfile="@{srcfile}" destfile="@{destfile}" 
					debug="@{debug}" config="@{config}" resultproperty="@{resultproperty}" 
					failonerror="@{failonerror}" dir="@{dir}"/>
			<engine-inject host="@{host}" port="@{port}" file="@{destfile}" 
					resultproperty="@{resultproperty}" failonerror="@{failonerror}" dir="@{dir}" />
		</sequential>
	</macrodef>

	<!-- DELETE-SCENARIO: Delete the specified scenario namespace from
	     the correlator. -->
	<macrodef name="delete-scenario">
		<attribute name="host" default="${correlator.host}" />
		<attribute name="port" default="${correlator.port}" />
		<attribute name="scenarios" />
		<attribute name="force" default="false" />
		<!-- This option is deprecated -->
		<attribute name="kill" default="false" />
		<attribute name="verbose" default="false" />
		<attribute name="utf8" default="false" />
		<attribute name="resultproperty" default="" />
		<attribute name="failonerror" default="true" />
		<attribute name="extraArgs" default="" />
		<attribute name="dir" default="" />
		<sequential>
			<var name="dsArgs" value="" />
			<!-- Prepend Scenario to scenario names -->
			<for param="s" list="@{scenarios}" delimiter=" ,">
				<sequential>
					<append-arg var="dsArgs" arg="Scenario_@{s}"/>
				</sequential>
			</for>

			<engine-delete host="@{host}" port="@{port}" force="@{force}" 
			               verbose="@{verbose}" utf8="@{utf8}" 
			               names="${dsArgs}" resultproperty="@{resultproperty}" 
			               failonerror="@{failonerror}" extraArgs="@{extraArgs}" 
			               dir="@{dir}" />
		</sequential>
	</macrodef>

	<!-- GENERATE-SCENARIOS: Generate monitorscript from all scenario,
	     block, and function definitions found from the specified
	     directories. The monitorscript is injected into the correlator
	     if the inject argument is true. -->
	<macrodef name="generate-scenarios">
		<attribute name="host" default="${correlator.host}" />
		<attribute name="port" default="${correlator.port}" />
		<attribute name="debug" default="false" />
		<attribute name="inject" default="false" />
		<attribute name="sourcedir" default="${scenarios.dir}" />
		<attribute name="targetdir" default="${build.dir}" />
		<attribute name="config" default="${event_modeler.config}" />
		<attribute name="blockdir" default="" />
		<attribute name="functiondir" default="" />
		<attribute name="resultproperty" default="" />
		<attribute name="failonerror" default="true" />
		<attribute name="dir" default="" />

		<sequential>
			<var name="srcdir" unset="true"/>
			<property name="srcdir" location="@{sourcedir}" />
			<var name="dstdir" unset="true"/>
			<property name="dstdir" location="@{targetdir}" />

			<sequential>
				<for param="sdffile">
					<path>
						<fileset dir="${srcdir}" includes="**/*.sdf" />
					</path>
					<sequential>
						<!-- use vars instead of properties so we can rebind
								 them on each iteration of the loop -->
						<var name="buildpath" unset="true"/>
						<var name="builddir" unset="true"/>
						<var name="buildfile" unset="true"/>

						<pathconvert property="buildpath">
							<map from="${srcdir}/" to="${dstdir}/"/>
							<path location="@{sdffile}"/>
						</pathconvert>

						<dirname property="builddir" file="${buildpath}" />
						<basename property="buildfile" file="${buildpath}" suffix=".sdf" />
						<var name="monfile" value="${builddir}${file.separator}${buildfile}.mon" />

						<echo>sdffile: @{sdffile}</echo>
						<echo>sourcedir: @{sourcedir}</echo>
						<echo>srcdir: ${srcdir}</echo>
						<echo>targetdir: @{targetdir}</echo>
						<echo>tgtdir: @{tgtdir}</echo>
						<echo>buildpath: ${buildpath}</echo>
						<echo>builddir: ${builddir}</echo>
						<echo>buildfile: ${buildfile}</echo>
						<echo>mon: ${builddir}${file.separator}${buildfile}.mon</echo>
						<echo>monfile: ${monfile}</echo>

						<generate-scenario srcfile="@{sdffile}" debug="@{debug}" 
								destfile="${monfile}" config="@{config}" 
								resultproperty="@{resultproperty}" dir="@{dir}"/>
						<if>
							<istrue value="@{inject}" />
							<then>
								<engine-inject host="@{host}" port="@{port}" file="${monfile}" 
										resultproperty="@{resultproperty}" failonerror="@{failonerror}" dir="@{dir}" />
							</then>
						</if>
					</sequential>
				</for>
			</sequential>
		</sequential>
	</macrodef>

	<!-- INJECT-SCENARIOS: Generate monitorscript from all scenario,
	     block, and function definitions found from the specified
	     directories. The monitorscript is then injected into the
	     correlator. -->
	<macrodef name="inject-scenarios">
		<attribute name="host" default="${correlator.host}" />
		<attribute name="port" default="${correlator.port}" />
		<attribute name="debug" default="false" />
		<attribute name="inject" default="false" />
		<attribute name="sourcedir" default="${scenarios.dir}" />
		<attribute name="targetdir" default="${build.dir}" />
		<attribute name="config" default="${event_modeler.config}" />
		<attribute name="blockdir" default="" />
		<attribute name="functiondir" default="" />
		<attribute name="resultproperty" default="" />
		<attribute name="failonerror" default="true" />
		<attribute name="dir" default="" />

		<sequential>
			<generate-scenarios host="@{host}" port="@{port}" debug="@{debug}"
					inject="true" sourcedir="@{sourcedir}" targetdir="@{targetdir}"
					config="@{config}" blockdir="@{blockdir}" functiondir="@{functiondir}"
					resultproperty="@{resultproperty}" failonerror="@{failonerror}" dir="@{dir}"/>
		</sequential>
	</macrodef>

	<!-- INJECT-QUERY: Inject an Apama Query file into a running correlator -->
	<macrodef name="inject-query">
		<attribute name="host" default="${correlator.host}" />
		<attribute name="port" default="${correlator.port}" />
		<attribute name="file" default="" />
		<attribute name="resultproperty" default="" />
		<attribute name="failonerror" default="true" />
		<attribute name="diagnostics" default="false" description="Enable runtime diagnostic logging in the query"/>
		<sequential>
			<var name="codegenArgs"/>
			<append-arg var="codegenArgs" arg="--host"/>
			<append-arg var="codegenArgs" arg="@{host}"/>
			<append-arg var="codegenArgs" arg="--port"/>
			<append-arg var="codegenArgs" arg="@{port}"/>
			<append-arg var="codegenArgs" arg="@{file}"/>
			<append-arg var="codegenArgs" arg="@{file}.mon"/>
			<if>
				<equals arg1="@{diagnostics}" arg2="true"/>
				<then>
					<append-arg var="codegenArgs" arg="--diagnostics"/>
				</then>
			</if>
			<trycatch reference="inject-query.exception">
				<try>
					<java jar="${apama.lib}/QueryCodegen.jar" fork="true" failonerror="true">
						<arg line="${codegenArgs}"/>
					</java>
					<engine-inject host="@{host}" port="@{port}" file="@{file}.mon"/>
					<engine-management host="@{host}" port="@{port}">
						<arg line="-r &quot;flushAllQueues 6&quot;"/>
					</engine-management>
				</try>
				<catch>
					<property name="@{resultproperty}" value="1"/>
					<if>
						<equals arg1="@{failonerror}" arg2="true"/>
						<then>
							<throw refid="inject-query.exception"/>
						</then>
					</if>
				</catch>
				<finally>
					<property name="@{resultproperty}" value="0"/>
					<delete file="@{file}.mon"/>
				</finally>
			</trycatch>
		</sequential>
	</macrodef>
	<!-- #### End of Scenario macros #### -->

	<!-- #### GUI macros #### -->
	<macrodef name="start-event-modeler">
		<attribute name="config" default="${event_modeler.config}" />
		<attribute name="resultproperty" default="" />
		<attribute name="failonerror" default="true" />
		<attribute name="extraArgs" default="" />
		<attribute name="dir" default="" />
		<sequential>
			<var name="semArgs" />
			<append-arg-if-set var="semArgs" optionName="-c" arg="@{config}" />
			<append-extra-args var="semArgs" extraArgs="@{extraArgs}" />

			<run-event-modeler argString="${semArgs}" resultproperty="@{resultproperty}" 
			                   failonerror="@{failonerror}" extraArgs="@{extraArgs}" dir="@{dir}" />
		</sequential>
	</macrodef>

	<macrodef name="start-dashboard-builder">
		<attribute name="host" default="${correlator.host}" />
		<attribute name="port" default="${correlator.port}" />
		<attribute name="user" />
		<attribute name="file" />
		<attribute name="resultproperty" default="" />
		<attribute name="failonerror" default="true" />
		<attribute name="extraArgs" default="" />
		<attribute name="dir" default="" />
		<attribute name="runInForeground" default="true" />
		<sequential>
			<var name="sdbArgs" />
			<append-arg var="sdbArgs" arg="--apama.user" quote=""/>
			<append-arg var="sdbArgs" arg="@{user}" quote=""/>
			<append-arg var="sdbArgs" arg="--correlator" quote=""/>
			<append-arg var="sdbArgs" arg="{default:@{host}:@{port}:false}" quote=""/>
			<append-extra-args var="sdbArgs" extraArgs="@{extraArgs}" />
			<append-arg var="sdbArgs" arg="@{file}" />


			<if>
				<equals arg1="@{runInForeground}" arg2="true"/>
				<then>
					<exec executable="${apama.bin}/dashboard_builder${bin.ext}"
					resultproperty="@{resultproperty}" failonerror="${failonerror}" dir="@{dir}">
						<env key="APAMA_DASHBOARD_CLASSPATH" value="${apama_dashboard_classpath}"/>
						<arg line="${sdbArgs}" />
					</exec>
				</then>
				<else>
					<echo message="start-dashboard-builer: Running in background, ignoring failonerror and resultproperty attributes"/>
					<exec executable="${apama.bin}/dashboard_builder${bin.ext}" spawn="true"
					dir="@{dir}">
						<env key="APAMA_DASHBOARD_CLASSPATH" value="${apama_dashboard_classpath}"/>
						<arg line="${sdbArgs}" />
					</exec>
				</else>
			</if>

		</sequential>
	</macrodef>

	<macrodef name="start-dashboard-viewer">
		<attribute name="user" default="${user.name}" />
		<attribute name="title" default="Apama Dashboard" />
		<attribute name="name" default="dashboard_viewer" />
		<attribute name="purgeOnEdit" default="false" />
		<attribute name="purgeOnRemove" default="false" />
		<attribute name="maxTrend" default="1000" />
		<attribute name="filterInstance" default="true" />
		<attribute name="connectMode" default="asNeeded" />
		<attribute name="extensionFile" default="" />
		<attribute name="jaasFile" default="" />
		<attribute name="trendConfigFile" default="" />
		<attribute name="correlators" default="default:${correlator.host}:${correlator.port}:false" />
		<attribute name="showMenus" default="false" />
		<attribute name="showSplash" default="false" />
		<attribute name="direct" default="true" />
		<attribute name="isConfig" default="false" />
		<attribute name="dashboard" />
		<attribute name="extraArgs" default="" />
		<attribute name="dir" default="" />
		<attribute name="runInForeground" default="false" />
		<attribute name="failonerror" default="true" />
		<sequential>
			<var name="sdvSpawn" unset="true"/>
			<var name="sdvFailOnError" unset="@{failonerror}"/>
			<if>
				<equals arg1="@{runInForeground}" arg2="true" />
				<then>
					<var name="sdvSpawn" value="false" />
				</then>
				<else>
					<var name="sdvSpawn" value="true" />
					<if>
						<equals arg1="@{failonerror}" arg2="true"/>
						<then>
							<echo message="start-dashboard-viewer: Overriding failonerror to false as runInForeground is false"/>
							<var name="sdvFailOnError" value="false"/>
						</then>
						<else>
						</else>
					</if>
				</else>
			</if>

			<var name="sdvArgs" />
			<append-arg-if-set var="sdvArgs" optionName="--apama.user" arg="@{user}" />
			<append-arg-if-set var="sdvArgs" optionName="-t" arg="@{title}" />
			<append-arg-if-set var="sdvArgs" optionName="--name" arg="@{name}" />
			<append-arg-if-set var="sdvArgs" optionName="--purgeOnEdit" arg="@{purgeOnEdit}" />
			<append-arg-if-set var="sdvArgs" optionName="--purgeOnRemove" arg="@{purgeOnRemove}" />
			<append-arg-if-set var="sdvArgs" optionName="--maxTrend" arg="@{maxTrend}" />
			<append-arg-if-set var="sdvArgs" optionName="-F" arg="@{filterInstance}" />
			<append-arg-if-set var="sdvArgs" optionName="--connectMode" arg="@{connectMode}" />
			<append-arg-if-set var="sdvArgs" optionName="--extensionFile" arg="@{extensionFile}" />
			<append-arg-if-set var="sdvArgs" optionName="--jaasFile" arg="@{jaasFile}" />
			<append-arg-if-set var="sdvArgs" optionName="--trendConfigFile" arg="@{trendConfigFile}" />

			<for param="ac" list="@{correlators}" delimiter=" ,">
				<sequential>
					<append-arg-if-set var="sdvArgs" optionName="-c" arg="@{ac}"/>
				</sequential>
			</for>

			<append-arg-if-false var="sdvArgs" optionName="--nomenus" arg="@{showMenus}" />
			<append-arg-if-false var="sdvArgs" optionName="--nosplash" arg="@{showSplash}" />
			<append-arg-if-true var="sdvArgs" optionName="--direct" arg="@{direct}" />
			<append-extra-args var="sdvArgs" extraArgs="@{extraArgs}" />
			<append-arg-if-true var="sdvArgs" optionName="-C"  arg="@{isConfig}" />
			<append-arg var="sdvArgs" arg="@{dashboard}"/>

			<echo message="Starting Dashboard Viewer with args: ${sdvArgs}" />
			<exec executable="${apama.bin}/dashboard_viewer${bin.ext}" spawn="${sdvSpawn}" dir="@{dir}" failonerror="${sdvFailOnError}">
				<env key="APAMA_DASHBOARD_CLASSPATH" value="${apama_dashboard_classpath}"/>
				<arg line="${sdvArgs}" />
			</exec>
		</sequential>

	</macrodef>

	<macrodef name="start-dashboard-server">
		<attribute name="dataPort" default="3278" />
		<attribute name="port" default="${dashboard.port}" />
		<attribute name="name" default="dashboard_server_@{port}" />
		<attribute name="log" default="${log.dir}${file.separator}@{name}_${LOG_TSTAMP}.log" />
		<attribute name="logLevel" default="INFO" />
		<attribute name="purgeOnEdit" default="false" />
		<attribute name="purgeOnRemove" default="true" />
		<attribute name="maxTrend" default="1000" />
		<attribute name="filterInstance" default="true" />
		<attribute name="authUsers" default="false" />
		<attribute name="connectMode" default="asNeeded" />
		<attribute name="sendAllData" default="false" />
		<attribute name="ssl" default="false" />
		<attribute name="extensionFile" default="" />
		<attribute name="jaasFile" default="" />
		<attribute name="trendConfigFile" default="" />
		<attribute name="correlators" default="default:${correlator.host}:${correlator.port}:false" />
		<attribute name="console" default="false" />
		<attribute name="extraArgs" default="" />
		<attribute name="dir" default="" />
		<sequential>
			<var name="sdsArgs" />
			<append-arg-if-set var="sdsArgs" optionName="--dataPort" arg="@{dataPort}" />
			<append-arg-if-set var="sdsArgs" optionName="-p" arg="@{port}" />
			<append-arg-if-set var="sdsArgs" optionName="-f" arg="@{log}" />
			<append-arg-if-set var="sdsArgs" optionName="--loglevel" arg="@{logLevel}" />
			<append-arg-if-set var="sdsArgs" optionName="--name" arg="@{name}" />
			<append-arg-if-set var="sdsArgs" optionName="--purgeOnEdit" arg="@{purgeOnEdit}" />
			<append-arg-if-set var="sdsArgs" optionName="--purgeOnRemove" arg="@{purgeOnRemove}" />
			<append-arg-if-set var="sdsArgs" optionName="--maxTrend" arg="@{maxTrend}" />
			<append-arg-if-set var="sdsArgs" optionName="--filterInstance" arg="@{filterInstance}" />
			<append-arg-if-set var="sdsArgs" optionName="--authUsers" arg="@{authUsers}" />
			<append-arg-if-set var="sdsArgs" optionName="--connectMode" arg="@{connectMode}" />
			<append-arg-if-true var="sdsArgs" optionName="--sendAllData" arg="@{sendAllData}" />
			<append-arg-if-true var="sdsArgs" optionName="--ssl" arg="@{ssl}" />
			<append-arg-if-set var="sdsArgs" optionName="--extensionFile" arg="@{extensionFile}" />
			<append-arg-if-set var="sdsArgs" optionName="--jaasFile" arg="@{jaasFile}" />
			<append-arg-if-set var="sdsArgs" optionName="--trendConfigFile" arg="@{trendConfigFile}" />

			<for param="ac" list="@{correlators}" delimiter=" ,">
				<sequential>
					<append-arg var="sdsArgs" arg="-c"/>
					<append-arg var="sdsArgs" arg="@{ac}"/>
				</sequential>
			</for>

			<append-extra-args var="sdsArgs" extraArgs="@{extraArgs}" />

			<echo message="Starting Dashboard Server with args: ${sdsArgs}" />

			<if>
				<and>
					<istrue value="@{console}" />
					<equals arg1="${osfamily}" arg2="windows" />
				</and>
				<then>
					<exec executable="cmd" spawn="true" dir="@{dir}" >
						<env key="APAMA_DASHBOARD_CLASSPATH" value="${apama_dashboard_classpath}"/>
						<arg line="/c start 'Dashboard Server p: @{port}' /min '${apama.bin}/dashboard_server${bin.ext}' ${sdsArgs}" />
					</exec>
				</then>

				<else>
					<exec executable="${apama.bin}/dashboard_server${bin.ext}" spawn="true" dir="@{dir}" >
						<env key="APAMA_DASHBOARD_CLASSPATH" value="${apama_dashboard_classpath}"/>
						<arg line="${sdsArgs}" />
					</exec>
				</else>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="stop-dashboard-server">
		<attribute name="hostname" default="${dashboard.host}" />
		<attribute name="port" default="${dashboard.port}" />
		<attribute name="resultproperty" default="" />
		<attribute name="failonerror" default="true" />
		<attribute name="dir" default="" />
		<sequential>
			<echo message="Stopping Dashboard Server at @{hostname}:@{port}" />
			<dashboard-management hostname="@{hostname}" port="@{port}" 
			                      shutdown="apama-macros.xml:stop-dashboard-server called" 
			                      resultproperty="@{resultproperty}" failonerror="@{failonerror}" 
			                      dir="@{dir}" />
		</sequential>
	</macrodef>

	<macrodef name="start-display-server">
		<attribute name="dataPort" default="3279" />
		<attribute name="port" default="28889" />
		<attribute name="name" default="dashboard_display_server_@{port}" />
		<attribute name="log" default="${log.dir}${file.separator}@{name}_${LOG_TSTAMP}.log" />
		<attribute name="logLevel" default="INFO" />
		<attribute name="purgeOnEdit" default="false" />
		<attribute name="purgeOnRemove" default="true" />
		<attribute name="maxTrend" default="1000" />
		<attribute name="filterInstance" default="true" />
		<attribute name="authUsers" default="false" />
		<attribute name="connectMode" default="asNeeded" />
		<attribute name="sendAllData" default="false" />
		<attribute name="ssl" default="false" />
		<attribute name="extensionFile" default="" />
		<attribute name="jaasFile" default="" />
		<attribute name="trendConfigFile" default="" />
		<attribute name="correlators" default="default:${correlator.host}:${correlator.port}:false" />
		<attribute name="console" default="false" />
		<attribute name="extraArgs" default="" />
		<attribute name="dir" default="" />
		<sequential>
			<var name="sdispsArgs" />
			<append-arg-if-set var="sdispsArgs" optionName="--dataPort" arg="@{dataPort}" />
			<append-arg-if-set var="sdispsArgs" optionName="-p" arg="@{port}" />
			<append-arg-if-set var="sdispsArgs" optionName="-f" arg="@{log}" />
			<append-arg-if-set var="sdispsArgs" optionName="--loglevel" arg="@{logLevel}" />
			<append-arg-if-set var="sdispsArgs" optionName="--name" arg="@{name}" />
			<append-arg-if-set var="sdispsArgs" optionName="--purgeOnEdit" arg="@{purgeOnEdit}" />
			<append-arg-if-set var="sdispsArgs" optionName="--purgeOnRemove" arg="@{purgeOnRemove}" />
			<append-arg-if-set var="sdispsArgs" optionName="--maxTrend" arg="@{maxTrend}" />
			<append-arg-if-set var="sdispsArgs" optionName="--filterInstance" arg="@{filterInstance}" />
			<append-arg-if-set var="sdispsArgs" optionName="--authUsers" arg="@{authUsers}" />
			<append-arg-if-set var="sdispsArgs" optionName="--connectMode" arg="@{connectMode}" />
			<append-arg-if-true var="sdispsArgs" optionName="--sendAllData" arg="@{sendAllData}" />
			<append-arg-if-true var="sdispsArgs" optionName="--ssl" arg="@{ssl}" />
			<append-arg-if-set var="sdispsArgs" optionName="--extensionFile" arg="@{extensionFile}" />
			<append-arg-if-set var="sdispsArgs" optionName="--jaasFile" arg="@{jaasFile}" />
			<append-arg-if-set var="sdispsArgs" optionName="--trendConfigFile" arg="@{trendConfigFile}" />

			<for param="ac" list="@{correlators}" delimiter=" ,">
				<sequential>
					<append-arg var="sdispsArgs" arg="-c"/>
					<append-arg var="sdispsArgs" arg="@{ac}"/>
				</sequential>
			</for>

			<append-extra-args var="sdispsArgs" extraArgs="@{extraArgs}" />

			<echo message="Starting Display Server with args: ${sdispsArgs}" />
			<if>
				<and>
					<istrue value="@{console}" />
					<equals arg1="${osfamily}" arg2="windows" />
				</and>
				<then>
					<exec executable="cmd" spawn="true" dir="@{dir}" >
						<env key="APAMA_DASHBOARD_CLASSPATH" value="${apama_dashboard_classpath}"/>
						<arg line="/c start 'Display Server p: @{port}' /min '${apama.display-server}' ${sdispsArgs}" />
					</exec>
				</then>

				<else>
					<exec executable="${apama.display-server}" spawn="true" dir="@{dir}" >
						<env key="APAMA_DASHBOARD_CLASSPATH" value="${apama_dashboard_classpath}"/>
						<arg line="${sdispsArgs}" />
					</exec>
				</else>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="start-scenario-browser">
		<attribute name="host" default="${correlator.host}" />
		<attribute name="port" default="${correlator.port}" />
		<attribute name="extraArgs" default="" />
		<attribute name="dir" default="" />
		<sequential>
			<java classpath="${apama.lib}/engine_client${apama.lib.version}.jar" classname="com.apama.services.scenario.gui.Main" fork="true" spawn="true" dir="@{dir}">
				<arg value="-n" />
				<arg value="@{host}" />
				<arg value="-p" />
				<arg value="@{port}" />
				<arg line="@{extraArgs}" />
			</java>
		</sequential>
	</macrodef>
	<!-- #### End of GUI macros #### -->

	<!-- #### Miscellaneous macros #### -->

	<!-- DASHBOARD-MANAGEMENT: Run the dashboard_management tool. The arg
	     elements can be used to specify which commandline arguments to
	     pass to dashboard_management. -->
	<macrodef name="dashboard-management">
		<attribute name="displayServer" default="false" />
		<attribute name="hostname" default="${dashboard.host}" />
		<attribute name="port" default="" />
		<attribute name="verbose" default="false" />
		<attribute name="deepping" default="false" />
		<attribute name="shutdown" default="" />
		<attribute name="waitFor" default="false" />
		<attribute name="invalidateUser" default="" />
		<attribute name="invalidateAll" default="false" />
		<attribute name="update" default="" />
		<attribute name="deploy" default="" />
		<attribute name="config" default="" />
		<attribute name="rtvPath" default="" />
		<attribute name="keystoreFile" default="" />
		<attribute name="alias" default="" />
		<attribute name="password" default="" />
		<attribute name="resultproperty" default="" />
		<attribute name="failonerror" default="true" />
		<attribute name="extraArgs" default="" />
		<attribute name="dir" default="" />

		<sequential>
			<var name="dmArgs" />
			<append-arg-if-true var="dmArgs" optionName="--displayServer" arg="@{displayServer}" />
			<append-arg-if-set var="dmArgs" optionName="--hostname" arg="@{hostname}" />
			<if>
				<equals arg1="@{port}" arg2="" />
				<then>
					<if>
						<istrue value="@{displayServer}" />
						<then>
							<append-arg var="dmArgs" arg="--port '28889'" quote="" />
						</then>
						<else>
							<append-arg var="dmArgs" arg="--port '${dashboard.port}'" quote="" />
						</else>
					</if>
				</then>
				<else>
					<append-arg var="dmArgs" arg="--port '@{port}'" quote="" />
				</else>
			</if>
			<append-arg-if-true var="dmArgs" optionName="--verbose" arg="@{verbose}" />
			<append-arg-if-true var="dmArgs" optionName="--deepping" arg="@{deepping}" />
			<append-arg-if-set var="dmArgs" optionName="--shutdown" arg="@{shutdown}" />
			<append-arg-if-true var="dmArgs" optionName="--waitFor" arg="@{waitFor}" />
			<append-arg-if-set var="dmArgs" optionName="--invalidateUser" arg="@{invalidateUser}" />
			<append-arg-if-true var="dmArgs" optionName="--invalidateAll" arg="@{invalidateAll}" />
			<append-arg-if-set var="dmArgs" optionName="--update" arg="@{update}" />
			<append-arg-if-set var="dmArgs" optionName="--deploy" arg="@{deploy}" />
			<append-arg-if-set var="dmArgs" optionName="--config" arg="@{config}" />
			<append-arg-if-set var="dmArgs" optionName="--rtvPath" arg="@{rtvPath}" />
			<append-arg-if-set var="dmArgs" optionName="--keystoreFile" arg="@{keystoreFile}" />
			<append-arg-if-set var="dmArgs" optionName="--alias" arg="@{alias}" />
			<append-arg-if-set var="dmArgs" optionName="--password" arg="@{password}" />
			<append-extra-args var="dmArgs" extraArgs="@{extraArgs}" />

			<echo message="Starting Dashboard Management with args: ${dmArgs}" />
			<exec executable="${apama.bin}/dashboard_management${bin.ext}" resultproperty="@{resultproperty}" failonerror="@{failonerror}" dir="@{dir}">
				<arg line="${dmArgs}" />
			</exec>
		</sequential>
	</macrodef>

	<macrodef name="annotate-jar">
		<attribute name="jar" />
		<attribute name="resultproperty" default="" />
		<attribute name="failonerror" default="true" />
		<attribute name="extraArgs" default="" />
		<attribute name="dir" default="" />
		<sequential>
			<java classpath="${apama.lib}/correlator_extension_api${apama.lib.version}.jar" 
			      classname="com.apama.jmon.annotation.JarProcessor" 
			      fork="true" resultproperty="@resultproperty}" failonerror="@{failonerror}" dir="@{dir}">
				<jvmarg value="-DAPAMA_LOG_LEVEL=WARN" />
				<arg value="@{jar}" />
				<arg line="@{extraArgs}" />
			</java>
		</sequential>
	</macrodef>

	<macrodef name="get-version">
		<attribute name="resultproperty" default="" />
		<attribute name="failonerror" default="true" />
		<attribute name="dir" default="" />
		<sequential>
			<exec executable="svn" output="${build.dir}/svn.info.head" resultproperty="@{resultproperty}" failonerror="@{failonerror}" dir="@{dir}">
				<arg value="info" />
				<arg value="--xml" />
				<arg value="--non-interactive" />
				<arg value="-rHEAD" />
				<arg value="--xml" />
			</exec>
			<xmlproperty file="${build.dir}/svn.info.head" prefix="svn.head" collapseAttributes="true" keepRoot="false" />
			<exec executable="svn" output="${build.dir}/svn.info.base" resultproperty="@{resultproperty}" failonerror="@{failonerror}" dir="@{dir}">
				<arg value="info" />
				<arg value="--xml" />
				<arg value="--non-interactive" />
				<arg value="-rBASE" />
				<arg value="--xml" />
			</exec>
			<xmlproperty file="${build.dir}/svn.info.base" prefix="svn.base" collapseAttributes="true" keepRoot="false" />
			<echo message="Working version = ${svn.base.entry.revision}" />
			<echo message="Head    version = ${svn.head.entry.revision}" />
		</sequential>
	</macrodef>

	<!-- Create a build directory structure -->
	<macrodef name="init">
		<attribute name="cleanall" default="false" />
		<sequential>
			<if>
				<istrue value="@{cleanall}" />
				<then>
					<delete includeemptydirs="true" failonerror="false" dir="${log.dir}" verbose="true" />
				</then>
			</if>
			<delete includeemptydirs="true" failonerror="false" dir="${build.dir}" verbose="true" />

			<mkdir dir="${log.dir}" />
			<mkdir dir="${build.dir}" />

			<copy todir="${build.dir}" overwrite="true">
				<fileset dir="${config.dir}" />
				<filterchain>
					<expandproperties />
				</filterchain>
			</copy>
		</sequential>
	</macrodef>

	<!-- Based on list of directories in the filelist specified by the list in adapter.build.files -->
	<macrodef name="build-adapters">
		<sequential>
			<for param="dir">
				<filelist refid="adapter.build.files" />
				<sequential>
					<ant antfile="@{dir}\\build.xml" dir="@{dir}" />
				</sequential>
			</for>
		</sequential>
	</macrodef>

	<macrodef name="clean">
		<sequential>
			<delete includeemptydirs="true" failonerror="false">
				<fileset dir="${build.dir}" />
				<fileset dir="${log.dir}" />
			</delete>
		</sequential>
	</macrodef>
	<!-- #### End of Miscellaneous macros #### -->

	<!-- #### Internal macros used as helpers in apama-macros.xml #### -->
	<!-- helper for appending an arg to the command line - the helper
	     wraps the argument in the 'quote' to avoid issues with white
	     space. This can be disabled by setting quote="". -->
	<macrodef name="append-arg">
		<attribute name="var" />
		<attribute name="arg" />
		<attribute name="quote" default="'" />
		<sequential>
			<if>
				<not>
					<equals arg1="@{arg}" arg2="" />
				</not>
				<then>
					<if>
						<equals arg1="${@{var}}" arg2="" />
						<then>
							<var name="@{var}" value="@{quote}@{arg}@{quote}" />
						</then>
						<else>
							<var name="@{var}" value="${@{var}} @{quote}@{arg}@{quote}" />
						</else>
					</if>
				</then>
			</if>
		</sequential>
	</macrodef>

	<!-- helper for appending command line arguments / options to a var
	     based on whether the arg value is "" or not -->
	<macrodef name="append-arg-if-set">
		<attribute name="var" />
		<attribute name="optionName" default=""/>
		<attribute name="arg" />
		<attribute name="defaultValue" default="" />
		<attribute name="quote" default="'" />
		<sequential>
			<if>
				<not>
					<equals arg1="@{arg}" arg2="" />
				</not>
				<then>
					<append-arg var="@{var}" arg="@{optionName}" quote="" />
					<append-arg var="@{var}" arg="@{arg}" quote="@{quote}"/>
				</then>
				<else>
					<if>
						<not>
							<equals arg1="@{defaultValue}" arg2="" />
						</not>
						<then>
							<append-arg var="@{var}" arg="@{optionName}" quote="" />
							<append-arg var="@{var}" arg="@{defaultValue}" quote="@{quote}" />
						</then>
					</if>
				</else>
			</if>
		</sequential>
	</macrodef>

	<!-- helper for appending command line options to a var when the arg
	     value is true -->
	<macrodef name="append-arg-if-true">
		<attribute name="var" />
		<attribute name="optionName" />
		<attribute name="arg" />
		<attribute name="quote" default="" />
		<sequential>
			<if>
				<istrue value="@{arg}" />
				<then>
					<append-arg var="@{var}" arg="@{optionName}" quote="@{quote}" />
				</then>
			</if>
		</sequential>
	</macrodef>

	<!-- helper for appending command line options to a var when the arg
	     value is true -->
	<macrodef name="append-arg-if-false">
		<attribute name="var" />
		<attribute name="optionName" />
		<attribute name="arg" />
		<attribute name="quote" default="" />
		<sequential>
			<if>
				<isfalse value="@{arg}" />
				<then>
					<append-arg var="@{var}" arg="@{optionName}" quote="@{quote}" />
				</then>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="append-extra-args">
		<attribute name="var" />
		<attribute name="extraArgs" />
		<sequential>
			<append-arg-if-set var="@{var}" arg="@{extraArgs}" quote="" />
		</sequential>
	</macrodef>

	<!-- #### end of internal macros #### -->
</project>
