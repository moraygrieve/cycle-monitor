//Cycle Monitor, Copyright (C) 2016  M.B.Grieve
//This file is part of the Cycle Monitor example application.

//Cycle Monitor is free software: you can redistribute it and/or modify
//it under the terms of the GNU General Public License as published by
//the Free Software Foundation, either version 3 of the License, or
//(at your option) any later version.

//Cycle Monitor is distributed in the hope that it will be useful,
//but WITHOUT ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//GNU General Public License for more details.

//You should have received a copy of the GNU General Public License
//along with City Monitor.  If not, see <http://www.gnu.org/licenses/>.

//Contact: moray.grieve@me.com

package com.jtech.config;

event DBLoader {
	action<> onLoaded;

	RateLoader rateLoader;
	BoundaryLoader boundaryLoader;
	sequence<ILoader> loaders;

	action init(DBConfig config, action<> onLoaded) {
		self.onLoaded := onLoaded;

		//open database
		com.apama.database.DBUtil db := new com.apama.database.DBUtil;
		db.open("JDBC", config.serviceId, config.databaseURL, config.user, config.password, "false", false, 100, 10.0, onError);        

		//load data 
		loaders.append( rateLoader.init(db, onDone) );
		loaders.append( boundaryLoader.init(db, onDone) );
		ILoader l; for l in loaders { l.doQuery();}

		//close database
		db.close(false);
	}

	action upperBoundaryConfig() returns dictionary< DBKey, DBBoundaryAlert > { return boundaryLoader.getUpperCache(); }
	action lowerBoundaryConfig() returns dictionary< DBKey, DBBoundaryAlert > { return boundaryLoader.getLowerCache(); }
	action rateThreholdConfig() returns dictionary< DBKey, DBRateAlert > { return rateLoader.getCache(); }

	action onError(string message) {
		log message at ERROR;
	}

	action onDone() {
		ILoader l; for l in loaders { 
			if not l.isDone() then { return;}
		}		
		onLoaded();
	}
}