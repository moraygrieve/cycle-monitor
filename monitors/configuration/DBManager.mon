//Cycle Monitor, Copyright (C) 2015  M.B.Grieve
//This file is part of the Cycle Monitor example application.

//Cycle Monitor is free software: you can redistribute it and/or modify
//it under the terms of the GNU General Public License as published by
//the Free Software Foundation, either version 3 of the License, or
//(at your option) any later version.

//Cycle Monitor is distributed in the hope that it will be useful,
//but WITHOUT ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//GNU General Public License for more details.

//You should have received a copy of the GNU General Public License
//along with City Monitor.  If not, see <http://www.gnu.org/licenses/>.

//Contact: moray.grieve@me.com

package com.jtech.config;

monitor DBManager {
	DBConfig config;
	DBLoader cacheLoader;

	action onload {
		on DBConfig():config load(onLoaded);
	}

	action load(action<> onDone) {
		log "Starting loading for connection with parameters; ";
		log "  databaseURL: " + config.databaseURL at INFO;
		log "  user: " + config.user at INFO;
		log "  password: " + config.password at INFO;
		cacheLoader.init(config, onDone);
	}

	action onLoaded() {
		log "Database is loaded, creating strategies";
		createUpperBoundaries();
		createLowerBoundaries();
		createRateThreshold();
		route DBLoaded();
	}

	action createUpperBoundaries() {
		DBBoundaryAlert value; 
		for value in cacheLoader.upperBoundaryConfig().values() {
			route CreateUpperBoundaryAlert(value.id, value.city, value.threshold);
		}
	}

	action createLowerBoundaries() {
		DBBoundaryAlert value; 
		for value in cacheLoader.lowerBoundaryConfig().values() {
			route CreateLowerBoundaryAlert(value.id, value.city, value.threshold);
		}
	}

	action createRateThreshold() {
		DBRateAlert value; 
		for value in cacheLoader.rateThreholdConfig().values() {
			route CreateRateThresholdAlert(value.id, value.city, value.percent, value.duration);
		}
	}
}