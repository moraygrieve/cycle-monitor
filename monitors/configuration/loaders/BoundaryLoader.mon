//Cycle Monitor, Copyright (C) 2015  M.B.Grieve
//This file is part of the Cycle Monitor example application.

//Cycle Monitor is free software: you can redistribute it and/or modify
//it under the terms of the GNU General Public License as published by
//the Free Software Foundation, either version 3 of the License, or
//(at your option) any later version.

//Cycle Monitor is distributed in the hope that it will be useful,
//but WITHOUT ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//GNU General Public License for more details.

//You should have received a copy of the GNU General Public License
//along with City Monitor.  If not, see <http://www.gnu.org/licenses/>.

//Contact: moray.grieve@me.com

package com.jtech.config;
using com.apama.database.DBUtil;

event BoundaryLoader {	
	ILoader this;
	BaseLoader base;
	dictionary< DBKey, DBBoundaryAlert > upperEntries;
	dictionary< DBKey, DBBoundaryAlert > lowerEntries;

	action init(DBUtil db, action<> onDone) returns ILoader {
		ILoader this := base.init(db, onDone);
		this.doQuery := doQuery;
		return this;
	}

	action doQuery() {
		log "Performing query for boundary alert details; " at INFO;
		base.db.doSQLQueryWithCallback("select * from boundary_alert_config", queryResult, queryDone);
	}

	action getUpperCache() returns dictionary< DBKey, DBBoundaryAlert > {
		return upperEntries;
	}

	action getLowerCache() returns dictionary< DBKey, DBBoundaryAlert > {
		return lowerEntries;
	}

	action queryResult(dictionary<string, string> data) {
		string city := data.getOrDefault("city");  
		string id := data.getOrDefault("id");
		string upper := data.getOrDefault("upper");
		if (id!="" and city!="" and upper="1") then {        
			upperEntries.add(DBKey(city, id.toInteger()),(new DBBoundaryAlert).fromResult(data));
		}
		else if (id!="" and city!="" and upper="0") then {        
			lowerEntries.add(DBKey(city, id.toInteger()),(new DBBoundaryAlert).fromResult(data));
		}
	}

	action queryDone(string error, integer eventCount) {
		log "Query complete, boundary alerts are; " at INFO;
		DBKey key; 
		for key in upperEntries.keys() {
			log "  Upper Boundary alert: " + upperEntries[key].pprint() at INFO;
		}
		for key in lowerEntries.keys() {
			log "  Lower Boundary alert: " + lowerEntries[key].pprint() at INFO;
		}
		base.onQueryDone();
	}
}